{
    "docs": [
        {
            "location": "/", 
            "text": "csvtk\n\n\nAnother cross-platform, efficient and practical CSV/TSV toolkit.\n\n\nFeatures\n\n\n\n\nCross-platform\n (Linux/Windows/Mac OS X/OpenBSD/FreeBSD)\n\n\nLight weight and out-of-the-box, no dependencies, no compilation, no configuration\n\n\nFast\n,  \nmultiple-CPUs supported\n\n\nPractical functions supported by N subcommands\n\n\nSupport STDIN and gziped input/output file, easy being used in pipe\n\n\n\n\nInstallation\n\n\nJust \ndownload\n executable file\n of your operating system and rename it to \ncsvtk.exe\n (Windows) or\n \ncsvtk\n (other operating systems) for convenience.\n\n\nYou can also add the directory of the executable file to environment variable\n\nPATH\n, so you can run \ncsvtk\n anywhere.\n\n\n\n\n\n\nFor windows, the simplest way is copy it to \nC:\\WINDOWS\\system32\n.\n\n\n\n\n\n\nFor Linux, type:\n\n\nchmod a+x /PATH/OF/FASTCOV/csvtk\necho export PATH=\\$PATH:/PATH/OF/FASTCOV \n ~/.bashrc\n\n\n\nor simply copy it to \n/usr/local/bin\n\n\n\n\n\n\nSubcommands (16 in total)\n\n\nInformation\n\n\n\n\nstat\n summary of CSV file\n\n\n\n\nFormat convertion\n\n\n\n\ncsv2tab\n convert CSV to tabular format\n\n\ntab2csv\n convert tabular format to CSV\n\n\nspace2tab\n convert space delimited format to CSV\n\n\ntranspose\n transpose CSV data\n\n\ncsv2md\n convert CSV to markdown format (TODO)\n\n\n\n\nSet operations\n\n\n\n\ncut\n select parts of fields\n\n\nuniq\n unique data without sorting\n\n\ninter\n intersection of multiple files\n\n\ngrep\n grep data by selected fields with patterns/regular expressions\n\n\nfilter\n filter data by values of selected fields with math expression (TODO)\n\n\njoin\n join multiple CSV files by selected fields\n\n\n\n\nEdit\n\n\n\n\nrename\n rename column names\n\n\nrename2\n rename column names by regular expression\n\n\nreplace\n replace data of selected fields by regular expression\n\n\nmutate\n create new columns from selected fields by regular expression\n\n\n\n\nOrdering\n\n\n\n\nsort\n sort by selected fields\n\n\n\n\nCompared to \ncsvkit\n\n\ncsvkit\n\n\n\n\n\n\n\n\nFeatures\n\n\ncsvtk\n\n\ncsvkit\n\n\nNote\n\n\n\n\n\n\n\n\n\n\nRead    Gzip\n\n\nYes\n\n\nYes\n\n\n\n\n\n\n\n\nFields ranges\n\n\nYes\n\n\nYes\n\n\ne.g. \n-f 1-4,6\n\n\n\n\n\n\nUnselect fileds\n\n\nYes\n\n\n--\n\n\ne.g. \n-1\n for excluding first column\n\n\n\n\n\n\nFuzzy fields\n\n\nYes\n\n\n--\n\n\ne.g. \nab*\n for columns with prefix \"ab\"\n\n\n\n\n\n\nOrder-specific fields\n\n\n--\n\n\nYes\n\n\nit means \n1,2\n is different from \n2,1\n\n\n\n\n\n\nRename columns\n\n\nYes\n\n\n--\n\n\nrename with new name(s) or from existed names\n\n\n\n\n\n\nSort by multiple keys\n\n\nYes\n\n\nYes\n\n\nbash sort like operations\n\n\n\n\n\n\nSort by number\n\n\nYes\n\n\n--\n\n\ne.g. \n-k 1:n\n\n\n\n\n\n\nMultiple sort\n\n\nYes\n\n\n--\n\n\ne.g. \n-k 2:r -k 1:nr\n\n\n\n\n\n\n\n\nto be continued...\n\n\nExamples\n\n\nAttention\n\n\n\n\nThe CSV parser requires all the lines have same number of fields/columns.\n Even lines with spaces will cause error.\n\n\nBy default, csvtk think your files have header row, if not, use \n-H\n.\n\n\nBy default, lines starting with \n#\n will be ignored, if the header row\n starts with \n#\n, please assign \n-C\n another rare symbol, e.g. \n.\n\n\nBy default, csvtk handles CSV files, use \n-t\n for tab-delimited files.\n\n\n\n\nExamples\n\n\n\n\n\n\nSelect fields/columns (\ncut\n)\n\n\n\n\nBy index: \ncsvtk cut -f 1,2\n\n\nBy names: \ncsvtk cut -f first_name,username\n\n\nUnselect\n: \ncsvtk cut -f -1,-2\n or \ncsvtk cut -f -first_name\n\n\nFuzzy fields\n: \ncsvtk cut -F -f \"*_name,username\"\n\n\nField ranges: \ncsvtk cut -f 2-4\n for column 2,3,4 or \ncsvtk cut -f -3--1\n for discarding column 1,2,3\n\n\nAll fields: \ncsvtk cut -F -f \"*\"\n\n\n\n\n\n\n\n\nSearch by selected fields (\ngrep\n)\n\n\n\n\nBy exactly matching: \ncsvtk grep -f first_name -p Robert -p Rob\n\n\nBy regular expression: \ncsvtk grep -f first_name -r -p Rob\n\n\nBy pattern list: \ncsvtk grep -f first_name -P name_list.txt\n\n\n\n\n\n\n\n\nRename column names (\nrename\n and \nrename2\n)\n\n\n\n\nSetting new names: \ncsvtk rename -f A,B -n a,b\n or \ncsvtk rename -f 1-3 -n a,b,c\n\n\nReplacing with original names by regular express: \ncat ../testdata/c.csv | ./csvtk rename2 -F -f \"*\" -p \"(.*)\" -r 'prefix_$1'\n for adding prefix to all column names.\n\n\n\n\n\n\n\n\nEdit data with regular expression (\nreplace\n)\n\n\n\n\nRemove Chinese charactors:  \ncsvtk replace -F -f \"*_name\" -p \"\\p{Han}+\" -r \"\"\n\n\n\n\n\n\n\n\nCreate new column from selected fields by regular expression (\nmutate\n)\n\n\n\n\nIn default, copy a column: \ncsvtk mutate -f id\n\n\nExtract prefix of data as group name (get \"A\" from \"A.1\" as group name):\n  \ncsvtk mutate -f sample -n group -p \"^(.+?)\\.\"\n\n\n\n\n\n\n\n\nSort by multiple keys (\nsort\n)\n\n\n\n\nBy single column : \ncsvtk sort -k 1\n or \ncsvtk sort -k last_name\n\n\nBy multiple columns: \ncsvtk sort -k 1,2\n or \ncsvtk sort -k 1 -k 2\n or \ncsvtk sort -k last_name,age\n\n\nSort by number: \ncsvtk sort -k 1:n\n or  \ncsvtk sort -k 1:nr\n for reverse number\n\n\nComplex sort: \ncsvtk sort -k region -k age:n -k id:nr\n\n\n\n\n\n\n\n\nJoin multiple files by keys (\njoin\n)\n\n\n\n\nAll files have same key column: \ncsvtk join -f id file1.csv file2.csv\n\n\nFiles have different key columns: \ncsvtk join -f \"username;username;name\" names.csv phone.csv adress.csv -k\n\n\n\n\n\n\n\n\nContact\n\n\nEmail me for any problem when using \ncsvtk\n. shenwei356(at)gmail.com\n\n\nOr \ncreate an issue\n to report bugs,\npropose new functions or ask for help.\n\n\nOr \nleave a comment\n.\n\n\nLicense\n\n\nMIT License", 
            "title": "Home"
        }, 
        {
            "location": "/#csvtk", 
            "text": "Another cross-platform, efficient and practical CSV/TSV toolkit.", 
            "title": "csvtk"
        }, 
        {
            "location": "/#features", 
            "text": "Cross-platform  (Linux/Windows/Mac OS X/OpenBSD/FreeBSD)  Light weight and out-of-the-box, no dependencies, no compilation, no configuration  Fast ,   multiple-CPUs supported  Practical functions supported by N subcommands  Support STDIN and gziped input/output file, easy being used in pipe", 
            "title": "Features"
        }, 
        {
            "location": "/#installation", 
            "text": "Just  download  executable file\n of your operating system and rename it to  csvtk.exe  (Windows) or\n  csvtk  (other operating systems) for convenience.  You can also add the directory of the executable file to environment variable PATH , so you can run  csvtk  anywhere.    For windows, the simplest way is copy it to  C:\\WINDOWS\\system32 .    For Linux, type:  chmod a+x /PATH/OF/FASTCOV/csvtk\necho export PATH=\\$PATH:/PATH/OF/FASTCOV   ~/.bashrc  or simply copy it to  /usr/local/bin", 
            "title": "Installation"
        }, 
        {
            "location": "/#subcommands-16-in-total", 
            "text": "Information   stat  summary of CSV file   Format convertion   csv2tab  convert CSV to tabular format  tab2csv  convert tabular format to CSV  space2tab  convert space delimited format to CSV  transpose  transpose CSV data  csv2md  convert CSV to markdown format (TODO)   Set operations   cut  select parts of fields  uniq  unique data without sorting  inter  intersection of multiple files  grep  grep data by selected fields with patterns/regular expressions  filter  filter data by values of selected fields with math expression (TODO)  join  join multiple CSV files by selected fields   Edit   rename  rename column names  rename2  rename column names by regular expression  replace  replace data of selected fields by regular expression  mutate  create new columns from selected fields by regular expression   Ordering   sort  sort by selected fields", 
            "title": "Subcommands (16 in total)"
        }, 
        {
            "location": "/#compared-to-csvkit", 
            "text": "csvkit     Features  csvtk  csvkit  Note      Read    Gzip  Yes  Yes     Fields ranges  Yes  Yes  e.g.  -f 1-4,6    Unselect fileds  Yes  --  e.g.  -1  for excluding first column    Fuzzy fields  Yes  --  e.g.  ab*  for columns with prefix \"ab\"    Order-specific fields  --  Yes  it means  1,2  is different from  2,1    Rename columns  Yes  --  rename with new name(s) or from existed names    Sort by multiple keys  Yes  Yes  bash sort like operations    Sort by number  Yes  --  e.g.  -k 1:n    Multiple sort  Yes  --  e.g.  -k 2:r -k 1:nr     to be continued...", 
            "title": "Compared to csvkit"
        }, 
        {
            "location": "/#examples", 
            "text": "Attention   The CSV parser requires all the lines have same number of fields/columns.\n Even lines with spaces will cause error.  By default, csvtk think your files have header row, if not, use  -H .  By default, lines starting with  #  will be ignored, if the header row\n starts with  # , please assign  -C  another rare symbol, e.g.  .  By default, csvtk handles CSV files, use  -t  for tab-delimited files.   Examples    Select fields/columns ( cut )   By index:  csvtk cut -f 1,2  By names:  csvtk cut -f first_name,username  Unselect :  csvtk cut -f -1,-2  or  csvtk cut -f -first_name  Fuzzy fields :  csvtk cut -F -f \"*_name,username\"  Field ranges:  csvtk cut -f 2-4  for column 2,3,4 or  csvtk cut -f -3--1  for discarding column 1,2,3  All fields:  csvtk cut -F -f \"*\"     Search by selected fields ( grep )   By exactly matching:  csvtk grep -f first_name -p Robert -p Rob  By regular expression:  csvtk grep -f first_name -r -p Rob  By pattern list:  csvtk grep -f first_name -P name_list.txt     Rename column names ( rename  and  rename2 )   Setting new names:  csvtk rename -f A,B -n a,b  or  csvtk rename -f 1-3 -n a,b,c  Replacing with original names by regular express:  cat ../testdata/c.csv | ./csvtk rename2 -F -f \"*\" -p \"(.*)\" -r 'prefix_$1'  for adding prefix to all column names.     Edit data with regular expression ( replace )   Remove Chinese charactors:   csvtk replace -F -f \"*_name\" -p \"\\p{Han}+\" -r \"\"     Create new column from selected fields by regular expression ( mutate )   In default, copy a column:  csvtk mutate -f id  Extract prefix of data as group name (get \"A\" from \"A.1\" as group name):\n   csvtk mutate -f sample -n group -p \"^(.+?)\\.\"     Sort by multiple keys ( sort )   By single column :  csvtk sort -k 1  or  csvtk sort -k last_name  By multiple columns:  csvtk sort -k 1,2  or  csvtk sort -k 1 -k 2  or  csvtk sort -k last_name,age  Sort by number:  csvtk sort -k 1:n  or   csvtk sort -k 1:nr  for reverse number  Complex sort:  csvtk sort -k region -k age:n -k id:nr     Join multiple files by keys ( join )   All files have same key column:  csvtk join -f id file1.csv file2.csv  Files have different key columns:  csvtk join -f \"username;username;name\" names.csv phone.csv adress.csv -k", 
            "title": "Examples"
        }, 
        {
            "location": "/#contact", 
            "text": "Email me for any problem when using  csvtk . shenwei356(at)gmail.com  Or  create an issue  to report bugs,\npropose new functions or ask for help.  Or  leave a comment .", 
            "title": "Contact"
        }, 
        {
            "location": "/#license", 
            "text": "MIT License", 
            "title": "License"
        }, 
        {
            "location": "/download/", 
            "text": "Download\n\n\ncsvtk\n is implemented in \nGolang\n programming language,\n executable binary files \nfor most popular operating system\n are freely available\n  in \nrelease\n page.\n\n\nCurrent Version\n\n\n\n\ncsvtk v0.2.4\n\n\nfix bug of handling comment lines\n\n\nadd some notes before using csvtk\n\n\n\n\n\n\n\n\nInstallation\n\n\nJust \ndownload\n executable file\n of your operating system and rename it to \ncsvtk.exe\n (Windows) or\n \ncsvtk\n (other operating systems) for convenience,\n and then run it in command-line interface, no dependencies,\n no complicated compilation process.\n\n\nYou can also add the directory of the executable file to environment variable\n\nPATH\n, so you can run \ncsvtk\n anywhere.\n\n\n\n\n\n\nFor windows, the simplest way is copy it to \nC:\\WINDOWS\\system32\n.\n\n\n\n\n\n\nFor Linux, type:\n\n\nchmod a+x /PATH/OF/FASTCOV/csvtk\necho export PATH=\\$PATH:/PATH/OF/FASTCOV \n ~/.bashrc\n\n\n\nor simply copy it to \n/usr/local/bin\n\n\n\n\n\n\nPrevious Versions\n\n\n\n\ncsvtk v0.2.3\n\n\nadd flag \n--colnames\n to \ncut\n\n\nflag \n-f\n (\n--fields\n) of \njoin\n supports single value now\n\n\n\n\n\n\ncsvtk v0.2.2\n\n\nadd flag \n--keep-unmathed\n to \njoin\n\n\n\n\n\n\ncsvtk v0.2\n\n\nfinish almost functions\n\n\n\n\n\n\ncsvtk v0.2.1\n\n\nfix bug of \nmutate\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n* RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.\n* LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables\n*/\n/*\nvar disqus_config = function () {\nthis.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable\nthis.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable\n};\n*/\n(function() { // DON'T EDIT BELOW THIS LINE\nvar d = document, s = d.createElement('script');\n\ns.src = '//csvtk.disqus.com/embed.js';\n\ns.setAttribute('data-timestamp', +new Date());\n(d.head || d.body).appendChild(s);\n})();\n\n\n\n\nPlease enable JavaScript to view the \ncomments powered by Disqus.", 
            "title": "Download"
        }, 
        {
            "location": "/download/#download", 
            "text": "csvtk  is implemented in  Golang  programming language,\n executable binary files  for most popular operating system  are freely available\n  in  release  page.", 
            "title": "Download"
        }, 
        {
            "location": "/download/#current-version", 
            "text": "csvtk v0.2.4  fix bug of handling comment lines  add some notes before using csvtk", 
            "title": "Current Version"
        }, 
        {
            "location": "/download/#installation", 
            "text": "Just  download  executable file\n of your operating system and rename it to  csvtk.exe  (Windows) or\n  csvtk  (other operating systems) for convenience,\n and then run it in command-line interface, no dependencies,\n no complicated compilation process.  You can also add the directory of the executable file to environment variable PATH , so you can run  csvtk  anywhere.    For windows, the simplest way is copy it to  C:\\WINDOWS\\system32 .    For Linux, type:  chmod a+x /PATH/OF/FASTCOV/csvtk\necho export PATH=\\$PATH:/PATH/OF/FASTCOV   ~/.bashrc  or simply copy it to  /usr/local/bin", 
            "title": "Installation"
        }, 
        {
            "location": "/download/#previous-versions", 
            "text": "csvtk v0.2.3  add flag  --colnames  to  cut  flag  -f  ( --fields ) of  join  supports single value now    csvtk v0.2.2  add flag  --keep-unmathed  to  join    csvtk v0.2  finish almost functions    csvtk v0.2.1  fix bug of  mutate      \n/**\n* RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.\n* LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables\n*/\n/*\nvar disqus_config = function () {\nthis.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable\nthis.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable\n};\n*/\n(function() { // DON'T EDIT BELOW THIS LINE\nvar d = document, s = d.createElement('script');\n\ns.src = '//csvtk.disqus.com/embed.js';\n\ns.setAttribute('data-timestamp', +new Date());\n(d.head || d.body).appendChild(s);\n})();  Please enable JavaScript to view the  comments powered by Disqus.", 
            "title": "Previous Versions"
        }, 
        {
            "location": "/usage/", 
            "text": "Usage and Examples\n\n\nBefore use\n\n\nAttention\n\n\n\n\nThe CSV parser requires all the lines have same number of fields/columns.\n Even lines with spaces will cause error.\n\n\nBy default, csvtk think your files have header row, if not, use \n-H\n.\n\n\nBy default, lines starting with \n#\n will be ignored, if the header row\n starts with \n#\n, please assign \n-C\n another rare symbol, e.g. \n.\n\n\nBy default, csvtk handles CSV files, use \n-t\n for tab-delimited files.\n\n\n\n\ncsvkit\n\n\nUsage\n\n\nAnother cross-platform, efficient and practical CSV/TSV toolkit\n\nVersion: 0.2.4\n\nAuthor: Wei Shen \nshenwei356@gmail.com\n\n\nDocuments  : http://shenwei356.github.io/csvtk\nSource code: https://github.com/shenwei356/csvtk\n\nAttention:\n\n  1. The CSV parser requires all the lines have same number of fields/columns.\n     Even lines with spaces will cause error.\n  2. By default, csvtk think your files have header row, if not, use \n-H\n.\n  3. By default, lines starting with '#' will be ignored, if the header row\n     starts with '#', please assign \n-C\n another rare symbol, e.g. '\n'.\n  4. By default, csvtk handles CSV files, use \n-t\n for tab-delimited files.\n\nUsage:\n  csvtk [command]\n\nAvailable Commands:\n  csv2tab     convert CSV to tabular format\n  cut         select parts of fields\n  grep        grep data by selected fields with patterns/regular expressions\n  inter       intersection of multiple files\n  join        join multiple CSV files by selected fields\n  mutate      create new column from selected fields by regular expression\n  rename      rename column names\n  rename2     rename column names by regular expression\n  replace     replace data of selected fields by regular expression\n  sort        sort by selected fields\n  space2tab   convert space delimited format to CSV\n  stat        summary of CSV file\n  tab2csv     convert tabular format to CSV\n  transpose   transpose CSV data\n  uniq        unique data without sorting\n\nFlags:\n  -c, --chunk-size int         chunk size of CSV reader (default 50)\n  -C, --comment-char string    lines starting with commment-character will be ignored. if your header row starts with '#', please assign \n-C\n another rare symbol, e.g. '\n' (default \n#\n)\n  -d, --delimiter string       delimiting character of the input CSV file (default \n,\n)\n  -l, --lazy-quotes            if given, a quote may appear in an unquoted field and a non-doubled quote may appear in a quoted field\n  -H, --no-header-row          specifies that the input CSV file does not have header row\n  -j, --num-cpus int           number of CPUs to use (default value depends on your computer) (default 4)\n  -D, --out-delimiter string   delimiting character of the input CSV file (default \n,\n)\n  -o, --out-file string        out file (\n-\n for stdout, suffix .gz for gzipped out) (default \n-\n)\n  -T, --out-tabs               specifies that the output is delimited with tabs. Overrides \n-D\n\n  -t, --tabs                   specifies that the input CSV file is delimited with tabs. Overrides \n-d\n\n\nUse \ncsvtk [command] --help\n for more information about a command.\n\n\n\n\n\nstat\n\n\ncsv2tab\n\n\ntab2csv\n\n\nspace2tab\n\n\ntranspose\n\n\nUsage\n\n\n\n\n\n\n\nExamples\n\n\n$ cat digitals.tsv\n4       5       6                                                                                  \n1       2       3                                                                                  \n7       8       0\n8       1,000   4\n\n$ csvtk transpose -t digitals.tsv\n4       1       7       8\n5       2       8       1,000\n6       3       0       4\n\n\n\ncut\n\n\nUsage\n\n\nelect parts of fields\n\nUsage:\n  csvtk cut [flags]\n\nFlags:\n  -n, --colnames        print column names\n  -f, --fields string   select only these fields. e.g -f 1,2 or -f columnA,columnB\n  -F, --fuzzy-fields    using fuzzy fields, e.g. *name or id123*\n\n\n\n\n\nExamples\n\n\n\n\nPrint colnames: \ncsvtk cut -n\n\n\nBy index: \ncsvtk cut -f 1,2\n\n\nBy names: \ncsvtk cut -f first_name,username\n\n\nUnselect\n: \ncsvtk cut -f -1,-2\n or \ncsvtk cut -f -first_name\n\n\nFuzzy fields\n: \ncsvtk cut -F -f \"*_name,username\"\n\n\nField ranges: \ncsvtk cut -f 2-4\n for column 2,3,4 or \ncsvtk cut -f -3--1\n for discarding column 1,2,3\n\n\nAll fields: \ncsvtk cut -F -f \"*\"\n\n\n\n\nuniq\n\n\nUsage\n\n\nunique data without sorting\n\nUsage:\n  csvtk uniq [flags]\n\nFlags:\n  -f, --fields string   select only these fields. e.g -f 1,2 or -f columnA,columnB (default \n1\n)\n  -F, --fuzzy-fields    using fuzzy fileds, e.g. *name or id123*\n  -i, --ignore-case     ignore case\n\n\n\n\n\ninter\n\n\nUsage\n\n\nintersection of multiple files\n\nUsage:\n  csvtk inter [flags]\n\nFlags:\n  -f, --fields string   select only these fields. e.g -f 1,2 or -f columnA,columnB (default \n1\n)\n  -F, --fuzzy-fields    using fuzzy fileds, e.g. *name or id123*\n  -i, --ignore-case     ignore case\n\n\n\n\n\ngrep\n\n\nUsage\n\n\ngrep data by selected fields with patterns/regular expressions\n\nUsage:\n  csvtk grep [flags]\n\nFlags:\n  -f, --fields string         key field, column name or index (default \n1\n)\n  -i, --ignore-case           ignore case\n  -v, --invert                invert match\n  -p, --pattern value         query pattern (multiple values supported) (default [])\n  -P, --pattern-file string   pattern files (could also be CSV format)\n  -r, --use-regexp            patterns are regular expression\n\n\n\n\n\nExamples\n\n\n\n\nBy regular expression: \ncsvtk grep -f first_name -r -p Rob\n\n\nBy pattern list: \ncsvtk grep -f first_name -P name_list.txt\n\n\n\n\njoin\n\n\nUsage\n\n\njoin 2nd and later files to the first file by selected fields.\n\nMultiple keys supported, but the orders are ignored.\n\nUsage:\n  csvtk join [flags]\n\nFlags:\n  -f, --fields string    Semicolon seperated key fields of all files, if given one, we think all the files have the same key columns. e.g -f 1;2 or -f A,B;C,D or -f id (default \n1\n)\n  -F, --fuzzy-fields     using fuzzy fileds, e.g. *name or id123*\n  -i, --ignore-case      ignore case\n  -k, --keep-unmatched   keep unmatched data of the first file\n\n\n\n\n\nExamples:\n\n\n\n\nAll files have same key column: \ncsvtk join -f id file1.csv file2.csv\n\n\nFiles have different key columns: \ncsvtk join -f \"username;username;name\" names.csv phone.csv adress.csv -k\n\n\n\n\nrename\n\n\nUsage\n\n\nrename column names\n\nUsage:\n  csvtk rename [flags]\n\nFlags:\n  -f, --fields string   select only these fields. e.g -f 1,2 or -f columnA,columnB\n  -F, --fuzzy-fields    using fuzzy fileds, e.g. *name or id123*\n  -n, --names string    comma separated new names\n\n\n\n\n\nExamples:\n\n\n\n\nSetting new names: \ncsvtk rename -f A,B -n a,b\n or \ncsvtk rename -f 1-3 -n a,b,c\n\n\n\n\nrename2\n\n\nUsage\n\n\nrename column names by regular expression\n\nUsage:\n  csvtk rename2 [flags]\n\nFlags:\n  -f, --fields string        select only these fields. e.g -f 1,2 or -f columnA,columnB\n  -F, --fuzzy-fields         using fuzzy fileds, e.g. *name or id123*\n  -i, --ignore-case          ignore case\n  -p, --pattern string       search regular expression\n  -r, --replacement string   renamement. supporting capture variables.  e.g. $1 represents the text of the first submatch. ATTENTION: use SINGLE quote NOT double quotes in *nix OS or use the \\ escape character.\n\n\n\n\n\nExamples:\n\n\n\n\nreplacing with original names by regular express: \ncat ../testdata/c.csv | ./csvtk rename2 -F -f \"*\" -p \"(.*)\" -r 'prefix_$1'\n for adding prefix to all column names.\n\n\n\n\nreplace\n\n\nUsage\n\n\nreplace data of selected fields by regular expression\n\nUsage:\n  csvtk replace [flags]\n\nFlags:\n  -f, --fields string        select only these fields. e.g -f 1,2 or -f columnA,columnB (default \n1\n)\n  -F, --fuzzy-fields         using fuzzy fileds, e.g. *name or id123*\n  -i, --ignore-case          ignore case\n  -p, --pattern string       search regular expression\n  -r, --replacement string   replacement. supporting capture variables.  e.g. $1 represents the text of the first submatch. ATTENTION: use SINGLE quote NOT double quotes in *nix OS or use the \\ escape character.\n\n\n\n\n\nExamples\n\n\n\n\nremove Chinese charactors:  \ncsvtk replace -F -f \"*_name\" -p \"\\p{Han}+\" -r \"\"\n\n\n\n\nmutate\n\n\nUsage\n\n\ncreate new column from selected fields by regular expression\n\nUsage:\n  csvtk mutate [flags]\n\nFlags:\n  -f, --fields string    select only these fields. e.g -f 1,2 or -f columnA,columnB (default \n1\n)\n  -i, --ignore-case      ignore case\n      --na               for unmatched data, use blank instead of orginal data\n  -n, --name string      new column name\n  -p, --pattern string   search regular expression with capture bracket. e.g. (default \n^(.+)$\n)\n\n\n\n\n\nExamples\n\n\n\n\nIn default, copy a column: \ncsvtk mutate -f id\n\n\nextract prefix of data as group name (get \"A\" from \"A.1\" as group name):\n  \ncsvtk mutate -f sample -n group -p \"^(.+?)\\.\"\n\n\n\n\nsort\n\n\nUsage\n\n\nsort by selected fields\n\nUsage:\n  csvtk sort [flags]\n\nFlags:\n  -k, --keys value   keys. sort type supported, \nn\n for number and \nr\n for reverse. e.g. \n-k 1\n or \n-k A:r\n or \n-k 1:nr -k 2\n (default [1])\n\n\n\n\n\nExamples\n\n\n\n\nBy single column : \ncsvtk sort -k 1\n or \ncsvtk sort -k last_name\n\n\nBy multiple columns: \ncsvtk sort -k 1,2\n or \ncsvtk sort -k 1 -k 2\n or \ncsvtk sort -k last_name,age\n\n\nSort by number: \ncsvtk sort -k 1:n\n or  \ncsvtk sort -k 1:nr\n for reverse number\n\n\nComplex sort: \ncsvtk sort -k region -k age:n -k id:nr\n\n\n\n\n\n\n\n\n/**\n* RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.\n* LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables\n*/\n/*\nvar disqus_config = function () {\nthis.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable\nthis.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable\n};\n*/\n(function() { // DON'T EDIT BELOW THIS LINE\nvar d = document, s = d.createElement('script');\n\ns.src = '//csvtk.disqus.com/embed.js';\n\ns.setAttribute('data-timestamp', +new Date());\n(d.head || d.body).appendChild(s);\n})();\n\n\n\n\nPlease enable JavaScript to view the \ncomments powered by Disqus.", 
            "title": "Usage"
        }, 
        {
            "location": "/usage/#usage-and-examples", 
            "text": "", 
            "title": "Usage and Examples"
        }, 
        {
            "location": "/usage/#before-use", 
            "text": "Attention   The CSV parser requires all the lines have same number of fields/columns.\n Even lines with spaces will cause error.  By default, csvtk think your files have header row, if not, use  -H .  By default, lines starting with  #  will be ignored, if the header row\n starts with  # , please assign  -C  another rare symbol, e.g.  .  By default, csvtk handles CSV files, use  -t  for tab-delimited files.", 
            "title": "Before use"
        }, 
        {
            "location": "/usage/#csvkit", 
            "text": "Usage  Another cross-platform, efficient and practical CSV/TSV toolkit\n\nVersion: 0.2.4\n\nAuthor: Wei Shen  shenwei356@gmail.com \n\nDocuments  : http://shenwei356.github.io/csvtk\nSource code: https://github.com/shenwei356/csvtk\n\nAttention:\n\n  1. The CSV parser requires all the lines have same number of fields/columns.\n     Even lines with spaces will cause error.\n  2. By default, csvtk think your files have header row, if not, use  -H .\n  3. By default, lines starting with '#' will be ignored, if the header row\n     starts with '#', please assign  -C  another rare symbol, e.g. ' '.\n  4. By default, csvtk handles CSV files, use  -t  for tab-delimited files.\n\nUsage:\n  csvtk [command]\n\nAvailable Commands:\n  csv2tab     convert CSV to tabular format\n  cut         select parts of fields\n  grep        grep data by selected fields with patterns/regular expressions\n  inter       intersection of multiple files\n  join        join multiple CSV files by selected fields\n  mutate      create new column from selected fields by regular expression\n  rename      rename column names\n  rename2     rename column names by regular expression\n  replace     replace data of selected fields by regular expression\n  sort        sort by selected fields\n  space2tab   convert space delimited format to CSV\n  stat        summary of CSV file\n  tab2csv     convert tabular format to CSV\n  transpose   transpose CSV data\n  uniq        unique data without sorting\n\nFlags:\n  -c, --chunk-size int         chunk size of CSV reader (default 50)\n  -C, --comment-char string    lines starting with commment-character will be ignored. if your header row starts with '#', please assign  -C  another rare symbol, e.g. ' ' (default  # )\n  -d, --delimiter string       delimiting character of the input CSV file (default  , )\n  -l, --lazy-quotes            if given, a quote may appear in an unquoted field and a non-doubled quote may appear in a quoted field\n  -H, --no-header-row          specifies that the input CSV file does not have header row\n  -j, --num-cpus int           number of CPUs to use (default value depends on your computer) (default 4)\n  -D, --out-delimiter string   delimiting character of the input CSV file (default  , )\n  -o, --out-file string        out file ( -  for stdout, suffix .gz for gzipped out) (default  - )\n  -T, --out-tabs               specifies that the output is delimited with tabs. Overrides  -D \n  -t, --tabs                   specifies that the input CSV file is delimited with tabs. Overrides  -d \n\nUse  csvtk [command] --help  for more information about a command.", 
            "title": "csvkit"
        }, 
        {
            "location": "/usage/#stat", 
            "text": "", 
            "title": "stat"
        }, 
        {
            "location": "/usage/#csv2tab", 
            "text": "", 
            "title": "csv2tab"
        }, 
        {
            "location": "/usage/#tab2csv", 
            "text": "", 
            "title": "tab2csv"
        }, 
        {
            "location": "/usage/#space2tab", 
            "text": "", 
            "title": "space2tab"
        }, 
        {
            "location": "/usage/#transpose", 
            "text": "Usage    Examples  $ cat digitals.tsv\n4       5       6                                                                                  \n1       2       3                                                                                  \n7       8       0\n8       1,000   4\n\n$ csvtk transpose -t digitals.tsv\n4       1       7       8\n5       2       8       1,000\n6       3       0       4", 
            "title": "transpose"
        }, 
        {
            "location": "/usage/#cut", 
            "text": "Usage  elect parts of fields\n\nUsage:\n  csvtk cut [flags]\n\nFlags:\n  -n, --colnames        print column names\n  -f, --fields string   select only these fields. e.g -f 1,2 or -f columnA,columnB\n  -F, --fuzzy-fields    using fuzzy fields, e.g. *name or id123*  Examples   Print colnames:  csvtk cut -n  By index:  csvtk cut -f 1,2  By names:  csvtk cut -f first_name,username  Unselect :  csvtk cut -f -1,-2  or  csvtk cut -f -first_name  Fuzzy fields :  csvtk cut -F -f \"*_name,username\"  Field ranges:  csvtk cut -f 2-4  for column 2,3,4 or  csvtk cut -f -3--1  for discarding column 1,2,3  All fields:  csvtk cut -F -f \"*\"", 
            "title": "cut"
        }, 
        {
            "location": "/usage/#uniq", 
            "text": "Usage  unique data without sorting\n\nUsage:\n  csvtk uniq [flags]\n\nFlags:\n  -f, --fields string   select only these fields. e.g -f 1,2 or -f columnA,columnB (default  1 )\n  -F, --fuzzy-fields    using fuzzy fileds, e.g. *name or id123*\n  -i, --ignore-case     ignore case", 
            "title": "uniq"
        }, 
        {
            "location": "/usage/#inter", 
            "text": "Usage  intersection of multiple files\n\nUsage:\n  csvtk inter [flags]\n\nFlags:\n  -f, --fields string   select only these fields. e.g -f 1,2 or -f columnA,columnB (default  1 )\n  -F, --fuzzy-fields    using fuzzy fileds, e.g. *name or id123*\n  -i, --ignore-case     ignore case", 
            "title": "inter"
        }, 
        {
            "location": "/usage/#grep", 
            "text": "Usage  grep data by selected fields with patterns/regular expressions\n\nUsage:\n  csvtk grep [flags]\n\nFlags:\n  -f, --fields string         key field, column name or index (default  1 )\n  -i, --ignore-case           ignore case\n  -v, --invert                invert match\n  -p, --pattern value         query pattern (multiple values supported) (default [])\n  -P, --pattern-file string   pattern files (could also be CSV format)\n  -r, --use-regexp            patterns are regular expression  Examples   By regular expression:  csvtk grep -f first_name -r -p Rob  By pattern list:  csvtk grep -f first_name -P name_list.txt", 
            "title": "grep"
        }, 
        {
            "location": "/usage/#join", 
            "text": "Usage  join 2nd and later files to the first file by selected fields.\n\nMultiple keys supported, but the orders are ignored.\n\nUsage:\n  csvtk join [flags]\n\nFlags:\n  -f, --fields string    Semicolon seperated key fields of all files, if given one, we think all the files have the same key columns. e.g -f 1;2 or -f A,B;C,D or -f id (default  1 )\n  -F, --fuzzy-fields     using fuzzy fileds, e.g. *name or id123*\n  -i, --ignore-case      ignore case\n  -k, --keep-unmatched   keep unmatched data of the first file  Examples:   All files have same key column:  csvtk join -f id file1.csv file2.csv  Files have different key columns:  csvtk join -f \"username;username;name\" names.csv phone.csv adress.csv -k", 
            "title": "join"
        }, 
        {
            "location": "/usage/#rename", 
            "text": "Usage  rename column names\n\nUsage:\n  csvtk rename [flags]\n\nFlags:\n  -f, --fields string   select only these fields. e.g -f 1,2 or -f columnA,columnB\n  -F, --fuzzy-fields    using fuzzy fileds, e.g. *name or id123*\n  -n, --names string    comma separated new names  Examples:   Setting new names:  csvtk rename -f A,B -n a,b  or  csvtk rename -f 1-3 -n a,b,c", 
            "title": "rename"
        }, 
        {
            "location": "/usage/#rename2", 
            "text": "Usage  rename column names by regular expression\n\nUsage:\n  csvtk rename2 [flags]\n\nFlags:\n  -f, --fields string        select only these fields. e.g -f 1,2 or -f columnA,columnB\n  -F, --fuzzy-fields         using fuzzy fileds, e.g. *name or id123*\n  -i, --ignore-case          ignore case\n  -p, --pattern string       search regular expression\n  -r, --replacement string   renamement. supporting capture variables.  e.g. $1 represents the text of the first submatch. ATTENTION: use SINGLE quote NOT double quotes in *nix OS or use the \\ escape character.  Examples:   replacing with original names by regular express:  cat ../testdata/c.csv | ./csvtk rename2 -F -f \"*\" -p \"(.*)\" -r 'prefix_$1'  for adding prefix to all column names.", 
            "title": "rename2"
        }, 
        {
            "location": "/usage/#replace", 
            "text": "Usage  replace data of selected fields by regular expression\n\nUsage:\n  csvtk replace [flags]\n\nFlags:\n  -f, --fields string        select only these fields. e.g -f 1,2 or -f columnA,columnB (default  1 )\n  -F, --fuzzy-fields         using fuzzy fileds, e.g. *name or id123*\n  -i, --ignore-case          ignore case\n  -p, --pattern string       search regular expression\n  -r, --replacement string   replacement. supporting capture variables.  e.g. $1 represents the text of the first submatch. ATTENTION: use SINGLE quote NOT double quotes in *nix OS or use the \\ escape character.  Examples   remove Chinese charactors:   csvtk replace -F -f \"*_name\" -p \"\\p{Han}+\" -r \"\"", 
            "title": "replace"
        }, 
        {
            "location": "/usage/#mutate", 
            "text": "Usage  create new column from selected fields by regular expression\n\nUsage:\n  csvtk mutate [flags]\n\nFlags:\n  -f, --fields string    select only these fields. e.g -f 1,2 or -f columnA,columnB (default  1 )\n  -i, --ignore-case      ignore case\n      --na               for unmatched data, use blank instead of orginal data\n  -n, --name string      new column name\n  -p, --pattern string   search regular expression with capture bracket. e.g. (default  ^(.+)$ )  Examples   In default, copy a column:  csvtk mutate -f id  extract prefix of data as group name (get \"A\" from \"A.1\" as group name):\n   csvtk mutate -f sample -n group -p \"^(.+?)\\.\"", 
            "title": "mutate"
        }, 
        {
            "location": "/usage/#sort", 
            "text": "Usage  sort by selected fields\n\nUsage:\n  csvtk sort [flags]\n\nFlags:\n  -k, --keys value   keys. sort type supported,  n  for number and  r  for reverse. e.g.  -k 1  or  -k A:r  or  -k 1:nr -k 2  (default [1])  Examples   By single column :  csvtk sort -k 1  or  csvtk sort -k last_name  By multiple columns:  csvtk sort -k 1,2  or  csvtk sort -k 1 -k 2  or  csvtk sort -k last_name,age  Sort by number:  csvtk sort -k 1:n  or   csvtk sort -k 1:nr  for reverse number  Complex sort:  csvtk sort -k region -k age:n -k id:nr    \n/**\n* RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.\n* LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables\n*/\n/*\nvar disqus_config = function () {\nthis.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable\nthis.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable\n};\n*/\n(function() { // DON'T EDIT BELOW THIS LINE\nvar d = document, s = d.createElement('script');\n\ns.src = '//csvtk.disqus.com/embed.js';\n\ns.setAttribute('data-timestamp', +new Date());\n(d.head || d.body).appendChild(s);\n})();  Please enable JavaScript to view the  comments powered by Disqus.", 
            "title": "sort"
        }, 
        {
            "location": "/tutorial/", 
            "text": "Tutorial\n\n\nForewords\n\n\nYes, you could just use spreadsheet softwares like MS excel to\ndo most of the job.\n\n\nHowerver it's all by clicking and typing, which is \nnot\nautomatically and time-consuming to repeate\n, especially when we want to\napply similar operations with different datasets or purposes.\n\n\ncsvtk\n is \nconvenient for rapid investigation\nand also easy to integrated into analysis pipelines\n.\n It could save you much time of writting scripts.\n\n\nHope it be helpful for you.\n\n\nAnalyze OTU table\n\n\nData\n\n\nHere is mock a OTU table from 16S sequencing result.\nColumns are sample IDs in format of \"GROUP.ID\"\n\n\n    $ cat otu_table.csv\n    Taxonomy,A.1,A.2,A.3,B.1,B.2,B.3,C.1,C.2,C.3\n    Proteobacteria,.13,.29,.13,.16,.13,.22,.30,.23,.21\n    Firmicutes,.42,.06,.49,.41,.55,.41,.32,.38,.66\n    Bacteroidetes,.19,.62,.12,.33,.16,.29,.34,.35,.09\n    Deferribacteres,.17,.00,.24,.01,.01,.01,.01,.01,.02\n    Tenericutes,.00,.00,.00,.01,.03,.02,.00,.00,.00\n\n\n\nSteps\n\n\n\n\n\n\nCounting\n\n\n$ csvtk stat otu_table.csv\nfile: otu_table.csv  num_cols: 10  num_rows: 6\n\n\n\n\n\n\n\nConvert to tab-delimited table\n\n\n$ csvtk csv2tab  otu_table.csv\nTaxonomy        A.1     A.2     A.3     B.1     B.2     B.3     C.1     C.2     C.3\nProteobacteria  .13     .29     .13     .16     .13     .22     .30     .23     .21\nFirmicutes      .42     .06     .49     .41     .55     .41     .32     .38     .66\nBacteroidetes   .19     .62     .12     .33     .16     .29     .34     .35     .09\nDeferribacteres .17     .00     .24     .01     .01     .01     .01     .01     .02\nTenericutes     .00     .00     .00     .01     .03     .02     .00     .00     .00\n\n\n\n\n\n\n\nColumn names\n\n\n$ csvtk cut -n otu_table.csv \n#field  colname\n1       Taxonomy\n2       A.1\n3       A.2\n4       A.3\n5       B.1\n6       B.2\n7       B.3\n8       C.1\n9       C.2\n10      C.3\n\n\n\n\n\n\n\nExtract data of group A and B and save to file \n-o otu_table.gAB.csv\n\n\n$ csvtk cut -F -f \"A.*,B.*,Taxonomy\" otu_table.csv -o otu_table.gAB.csv\n$ cat otu_table.gAB.csv\nTaxonomy,A.1,A.2,A.3,B.1,B.2,B.3\nProteobacteria,.13,.29,.13,.16,.13,.22\nFirmicutes,.42,.06,.49,.41,.55,.41\nBacteroidetes,.19,.62,.12,.33,.16,.29\nDeferribacteres,.17,.00,.24,.01,.01,.01\nTenericutes,.00,.00,.00,.01,.03,.02\n\n\n\n\n\n\n\nTranspose\n\n\n$ csvtk transpose otu_table.gAB.csv -o otu_table.gAB.t.csv\n$ csvtk csv2tab  otu_table.gAB.t.csv         \nTaxonomy        Proteobacteria  Firmicutes      Bacteroidetes   Deferribacteres Tenericutes\nA.1     .13     .42     .19     .17     .00\nA.2     .29     .06     .62     .00     .00\nA.3     .13     .49     .12     .24     .00\nB.1     .16     .41     .33     .01     .01\nB.2     .13     .55     .16     .01     .03\nB.3     .22     .41     .29     .01     .02\n\n\n\n\n\n\n\nRename first column\n\n\n$ csvtk rename -f 1 -n \"sample\" otu_table.gAB.t.csv -o otu_table.gAB.t.r.csv\n$ csvtk csv2tab  otu_table.gAB.t.r.csv\nsample  Proteobacteria  Firmicutes      Bacteroidetes   Deferribacteres Tenericutes\nA.1     .13     .42     .19     .17     .00\nA.2     .29     .06     .62     .00     .00\nA.3     .13     .49     .12     .24     .00\nB.1     .16     .41     .33     .01     .01\nB.2     .13     .55     .16     .01     .03\nB.3     .22     .41     .29     .01     .02\n\n\n\n\n\n\n\nAdd group column\n\n\n$ csvtk mutate -p \"(.+?)\\.\" -n group otu_table.gAB.t.r.csv -o otu_table2.csv\n$ csvtk csv2tab otu_table2.csv\nsample  Proteobacteria  Firmicutes      Bacteroidetes   Deferribacteres Tenericutes     group\nA.1     .13     .42     .19     .17     .00     A\nA.2     .29     .06     .62     .00     .00     A\nA.3     .13     .49     .12     .24     .00     A\nB.1     .16     .41     .33     .01     .01     B\nB.2     .13     .55     .16     .01     .03     B\nB.3     .22     .41     .29     .01     .02     B\n\n\n\n\n\n\n\nRename groups:\n\n\n$ csvtk replace -f group -p \"A\" -r \"Ctrl\" otu_table2.csv | csvtk replace -f group -p \"B\" -r \"Treatment\" \n otu_table3.csv\n$ csvtk csv2tab otu_table3.csv sample  Proteobacteria  Firmicutes      Bacteroidetes   Deferribacteres Tenericutes     group\nA.1     .13     .42     .19     .17     .00     Ctrl\nA.2     .29     .06     .62     .00     .00     Ctrl\nA.3     .13     .49     .12     .24     .00     Ctrl\nB.1     .16     .41     .33     .01     .01     Treatment\nB.2     .13     .55     .16     .01     .03     Treatment\nB.3     .22     .41     .29     .01     .02     Treatment\n\n\n\n\n\n\n\nSort by abundance of \nProteobacteria\n in descending order.\n\n\n$ csvtk sort -k Proteobacteria:nr otu_table3.csv -T\nsample  Proteobacteria  Firmicutes      Bacteroidetes   Deferribacteres Tenericutes     group\nA.2     .29     .06     .62     .00     .00     Ctrl\nB.3     .22     .41     .29     .01     .02     Treatment\nB.1     .16     .41     .33     .01     .01     Treatment\nB.2     .13     .55     .16     .01     .03     Treatment\nA.3     .13     .49     .12     .24     .00     Ctrl\nA.1     .13     .42     .19     .17     .00     Ctrl\n\n\n\n\n\n\n\nSort by abundance of \nProteobacteria\n in descending order and \nFirmicutes\n in ascending order\n\n\n$ csvtk sort -k Proteobacteria:nr -k Firmicutes:n otu_table3.csv -T\nsample  Proteobacteria  Firmicutes      Bacteroidetes   Deferribacteres Tenericutes     group\nA.2     .29     .06     .62     .00     .00     Ctrl\nB.3     .22     .41     .29     .01     .02     Treatment\nB.1     .16     .41     .33     .01     .01     Treatment\nA.1     .13     .42     .19     .17     .00     Ctrl\nA.3     .13     .49     .12     .24     .00     Ctrl\nB.2     .13     .55     .16     .01     .03     Treatment\n\n\n\n\n\n\n\n\n\n\n\n/**\n* RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.\n* LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables\n*/\n/*\nvar disqus_config = function () {\nthis.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable\nthis.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable\n};\n*/\n(function() { // DON'T EDIT BELOW THIS LINE\nvar d = document, s = d.createElement('script');\n\ns.src = '//csvtk.disqus.com/embed.js';\n\ns.setAttribute('data-timestamp', +new Date());\n(d.head || d.body).appendChild(s);\n})();\n\n\n\n\nPlease enable JavaScript to view the \ncomments powered by Disqus.", 
            "title": "Tutorial"
        }, 
        {
            "location": "/tutorial/#tutorial", 
            "text": "", 
            "title": "Tutorial"
        }, 
        {
            "location": "/tutorial/#forewords", 
            "text": "Yes, you could just use spreadsheet softwares like MS excel to\ndo most of the job.  Howerver it's all by clicking and typing, which is  not\nautomatically and time-consuming to repeate , especially when we want to\napply similar operations with different datasets or purposes.  csvtk  is  convenient for rapid investigation\nand also easy to integrated into analysis pipelines .\n It could save you much time of writting scripts.  Hope it be helpful for you.", 
            "title": "Forewords"
        }, 
        {
            "location": "/tutorial/#analyze-otu-table", 
            "text": "", 
            "title": "Analyze OTU table"
        }, 
        {
            "location": "/tutorial/#data", 
            "text": "Here is mock a OTU table from 16S sequencing result.\nColumns are sample IDs in format of \"GROUP.ID\"      $ cat otu_table.csv\n    Taxonomy,A.1,A.2,A.3,B.1,B.2,B.3,C.1,C.2,C.3\n    Proteobacteria,.13,.29,.13,.16,.13,.22,.30,.23,.21\n    Firmicutes,.42,.06,.49,.41,.55,.41,.32,.38,.66\n    Bacteroidetes,.19,.62,.12,.33,.16,.29,.34,.35,.09\n    Deferribacteres,.17,.00,.24,.01,.01,.01,.01,.01,.02\n    Tenericutes,.00,.00,.00,.01,.03,.02,.00,.00,.00", 
            "title": "Data"
        }, 
        {
            "location": "/tutorial/#steps", 
            "text": "Counting  $ csvtk stat otu_table.csv\nfile: otu_table.csv  num_cols: 10  num_rows: 6    Convert to tab-delimited table  $ csvtk csv2tab  otu_table.csv\nTaxonomy        A.1     A.2     A.3     B.1     B.2     B.3     C.1     C.2     C.3\nProteobacteria  .13     .29     .13     .16     .13     .22     .30     .23     .21\nFirmicutes      .42     .06     .49     .41     .55     .41     .32     .38     .66\nBacteroidetes   .19     .62     .12     .33     .16     .29     .34     .35     .09\nDeferribacteres .17     .00     .24     .01     .01     .01     .01     .01     .02\nTenericutes     .00     .00     .00     .01     .03     .02     .00     .00     .00    Column names  $ csvtk cut -n otu_table.csv \n#field  colname\n1       Taxonomy\n2       A.1\n3       A.2\n4       A.3\n5       B.1\n6       B.2\n7       B.3\n8       C.1\n9       C.2\n10      C.3    Extract data of group A and B and save to file  -o otu_table.gAB.csv  $ csvtk cut -F -f \"A.*,B.*,Taxonomy\" otu_table.csv -o otu_table.gAB.csv\n$ cat otu_table.gAB.csv\nTaxonomy,A.1,A.2,A.3,B.1,B.2,B.3\nProteobacteria,.13,.29,.13,.16,.13,.22\nFirmicutes,.42,.06,.49,.41,.55,.41\nBacteroidetes,.19,.62,.12,.33,.16,.29\nDeferribacteres,.17,.00,.24,.01,.01,.01\nTenericutes,.00,.00,.00,.01,.03,.02    Transpose  $ csvtk transpose otu_table.gAB.csv -o otu_table.gAB.t.csv\n$ csvtk csv2tab  otu_table.gAB.t.csv         \nTaxonomy        Proteobacteria  Firmicutes      Bacteroidetes   Deferribacteres Tenericutes\nA.1     .13     .42     .19     .17     .00\nA.2     .29     .06     .62     .00     .00\nA.3     .13     .49     .12     .24     .00\nB.1     .16     .41     .33     .01     .01\nB.2     .13     .55     .16     .01     .03\nB.3     .22     .41     .29     .01     .02    Rename first column  $ csvtk rename -f 1 -n \"sample\" otu_table.gAB.t.csv -o otu_table.gAB.t.r.csv\n$ csvtk csv2tab  otu_table.gAB.t.r.csv\nsample  Proteobacteria  Firmicutes      Bacteroidetes   Deferribacteres Tenericutes\nA.1     .13     .42     .19     .17     .00\nA.2     .29     .06     .62     .00     .00\nA.3     .13     .49     .12     .24     .00\nB.1     .16     .41     .33     .01     .01\nB.2     .13     .55     .16     .01     .03\nB.3     .22     .41     .29     .01     .02    Add group column  $ csvtk mutate -p \"(.+?)\\.\" -n group otu_table.gAB.t.r.csv -o otu_table2.csv\n$ csvtk csv2tab otu_table2.csv\nsample  Proteobacteria  Firmicutes      Bacteroidetes   Deferribacteres Tenericutes     group\nA.1     .13     .42     .19     .17     .00     A\nA.2     .29     .06     .62     .00     .00     A\nA.3     .13     .49     .12     .24     .00     A\nB.1     .16     .41     .33     .01     .01     B\nB.2     .13     .55     .16     .01     .03     B\nB.3     .22     .41     .29     .01     .02     B    Rename groups:  $ csvtk replace -f group -p \"A\" -r \"Ctrl\" otu_table2.csv | csvtk replace -f group -p \"B\" -r \"Treatment\"   otu_table3.csv\n$ csvtk csv2tab otu_table3.csv sample  Proteobacteria  Firmicutes      Bacteroidetes   Deferribacteres Tenericutes     group\nA.1     .13     .42     .19     .17     .00     Ctrl\nA.2     .29     .06     .62     .00     .00     Ctrl\nA.3     .13     .49     .12     .24     .00     Ctrl\nB.1     .16     .41     .33     .01     .01     Treatment\nB.2     .13     .55     .16     .01     .03     Treatment\nB.3     .22     .41     .29     .01     .02     Treatment    Sort by abundance of  Proteobacteria  in descending order.  $ csvtk sort -k Proteobacteria:nr otu_table3.csv -T\nsample  Proteobacteria  Firmicutes      Bacteroidetes   Deferribacteres Tenericutes     group\nA.2     .29     .06     .62     .00     .00     Ctrl\nB.3     .22     .41     .29     .01     .02     Treatment\nB.1     .16     .41     .33     .01     .01     Treatment\nB.2     .13     .55     .16     .01     .03     Treatment\nA.3     .13     .49     .12     .24     .00     Ctrl\nA.1     .13     .42     .19     .17     .00     Ctrl    Sort by abundance of  Proteobacteria  in descending order and  Firmicutes  in ascending order  $ csvtk sort -k Proteobacteria:nr -k Firmicutes:n otu_table3.csv -T\nsample  Proteobacteria  Firmicutes      Bacteroidetes   Deferribacteres Tenericutes     group\nA.2     .29     .06     .62     .00     .00     Ctrl\nB.3     .22     .41     .29     .01     .02     Treatment\nB.1     .16     .41     .33     .01     .01     Treatment\nA.1     .13     .42     .19     .17     .00     Ctrl\nA.3     .13     .49     .12     .24     .00     Ctrl\nB.2     .13     .55     .16     .01     .03     Treatment     \n/**\n* RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.\n* LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables\n*/\n/*\nvar disqus_config = function () {\nthis.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable\nthis.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable\n};\n*/\n(function() { // DON'T EDIT BELOW THIS LINE\nvar d = document, s = d.createElement('script');\n\ns.src = '//csvtk.disqus.com/embed.js';\n\ns.setAttribute('data-timestamp', +new Date());\n(d.head || d.body).appendChild(s);\n})();  Please enable JavaScript to view the  comments powered by Disqus.", 
            "title": "Steps"
        }
    ]
}