{
    "docs": [
        {
            "location": "/", 
            "text": "csvtk\n\n\nAnother cross-platform, efficient, practical and pretty CSV/TSV toolkit\n\n\nYes, you could just use spreadsheet softwares like MS excel to\ndo most of the job.\n\n\nHowerver it's all by clicking and typing, which is \nnot\nautomatically and time-consuming to repeate\n, especially when we want to\napply similar operations with different datasets or purposes.\n\n\ncsvtk\n is \nconvenient for rapid investigation\nand also easy to integrated into analysis pipelines\n.\n It could save you much time of writting scripts.\n\n\nHope it be helpful to you.\n\n\nFeatures\n\n\n\n\nCross-platform\n (Linux/Windows/Mac OS X/OpenBSD/FreeBSD)\n\n\nLight weight and out-of-the-box, no dependencies, no compilation, no configuration\n\n\nFast\n,  \nmultiple-CPUs supported\n\n\nPractical functions supported by N subcommands\n\n\nSupport STDIN and gziped input/output file, easy being used in pipe\n\n\nMost of the subcommands support \nunselecting fields\n and \nfuzzy fields\n,\n  e.g. \n-f \"-id,-name\"\n for all fields except \"id\" and \"name\",\n  \n-F -f \"a.*\"\n for all fields with prefix \"a.\".\n\n\n\n\nSubcommands\n\n\n19 in total.\n\n\nInformation\n\n\n\n\nstat\n summary of CSV file\n\n\nstat2\n summary of selected number fields\n\n\n\n\nFormat convertion\n\n\n\n\npretty\n convert CSV to readable aligned table\n\n\ncsv2tab\n convert CSV to tabular format\n\n\ntab2csv\n convert tabular format to CSV\n\n\nspace2tab\n convert space delimited format to CSV\n\n\ntranspose\n transpose CSV data\n\n\ncsv2md\n convert CSV to markdown format\n\n\n\n\nSet operations\n\n\n\n\ncut\n select parts of fields\n\n\nuniq\n unique data without sorting\n\n\ninter\n intersection of multiple files\n\n\ngrep\n grep data by selected fields with patterns/regular expressions\n\n\nfilter\n filter data by values of selected fields with math expression\n\n\njoin\n join multiple CSV files by selected fields\n\n\n\n\nEdit\n\n\n\n\nrename\n rename column names\n\n\nrename2\n rename column names by regular expression\n\n\nreplace\n replace data of selected fields by regular expression\n\n\nmutate\n create new columns from selected fields by regular expression\n\n\n\n\nOrdering\n\n\n\n\nsort\n sort by selected fields\n\n\n\n\nInstallation\n\n\nDownload Page\n\n\nJust \ndownload\n gzip-compressed\nexecutable file of your operating system, and uncompress it with \ngzip -d *.gz\n command,\nrename it to \ncsvtk.exe\n (Windows) or \ncsvtk\n (other operating systems) for convenience.\n\n\nYou may need to add executable permision by \nchmod a+x csvtk\n.\n\n\nYou can also add the directory of the executable file to environment variable\n\nPATH\n, so you can run \ncsvtk\n anywhere.\n\n\n\n\n\n\nFor windows, the simplest way is copy it to \nC:\\WINDOWS\\system32\n.\n\n\n\n\n\n\nFor Linux, type:\n\n\nchmod a+x /PATH/OF/FASTCOV/csvtk\necho export PATH=\\$PATH:/PATH/OF/FASTCOV \n ~/.bashrc\n\n\n\nor simply copy it to \n/usr/local/bin\n\n\n\n\n\n\nCompared to \ncsvkit\n\n\ncsvkit\n\n\n\n\n\n\n\n\nFeatures\n\n\ncsvtk\n\n\ncsvkit\n\n\nNote\n\n\n\n\n\n\n\n\n\n\nRead    Gzip\n\n\nYes\n\n\nYes\n\n\n\n\n\n\n\n\nFields ranges\n\n\nYes\n\n\nYes\n\n\ne.g. \n-f 1-4,6\n\n\n\n\n\n\nUnselect fileds\n\n\nYes\n\n\n--\n\n\ne.g. \n-1\n for excluding first column\n\n\n\n\n\n\nFuzzy fields\n\n\nYes\n\n\n--\n\n\ne.g. \nab*\n for columns with prefix \"ab\"\n\n\n\n\n\n\nOrder-specific fields\n\n\n--\n\n\nYes\n\n\nit means \n1,2\n is different from \n2,1\n\n\n\n\n\n\nRename columns\n\n\nYes\n\n\n--\n\n\nrename with new name(s) or from existed names\n\n\n\n\n\n\nSort by multiple keys\n\n\nYes\n\n\nYes\n\n\nbash sort like operations\n\n\n\n\n\n\nSort by number\n\n\nYes\n\n\n--\n\n\ne.g. \n-k 1:n\n\n\n\n\n\n\nMultiple sort\n\n\nYes\n\n\n--\n\n\ne.g. \n-k 2:r -k 1:nr\n\n\n\n\n\n\nPretty output\n\n\nYes\n\n\n--\n\n\nconvert CSV to readable aligned table\n\n\n\n\n\n\n\n\nSimilar tools:\n\n\n\n\ncsvkit\n - A suite of utilities for converting to and working with CSV, the king of tabular file formats. http://csvkit.rtfd.org/\n\n\nxsv\n - A fast CSV toolkit written in Rust.\n\n\nmiller\n - Miller is like sed, awk, cut, join, and sort for \nname-indexed data such as CSV and tabular JSON http://johnkerl.org/miller\n\n\ntsv-utils-dlang\n - Command line utilities for tab-separated value files written in the D programming language.\n\n\n\n\nExamples\n\n\nAttention\n\n\n\n\nThe CSV parser requires all the lines have same number of fields/columns.\n    Even lines with spaces will cause error.\n\n\nBy default, csvtk thinks your files have header row, if not, use \"-H\".\n\n\nBy default, lines starting with '#' will be ignored, if the header row\n    starts with '#', please assign \"-C\" another rare symbol, e.g. '$'.\n\n\nBy default, csvtk handles CSV files, use \"-t\" for tab-delimited files.\n\n\nIf \" exists in tab-delimited files, use \"-l\".\n\n\n\n\nMore \nexamples\n and \ntutorial\n\n\nExamples\n\n\n\n\n\n\nPretty result\n\n\n$ csvtk pretty names.csv\nid   first_name   last_name   username\n11   Rob          Pike        rob\n2    Ken          Thompson    ken\n4    Robert       Griesemer   gri\n1    Robert       Thompson    abc\nNA   Robert       Abel        123\n\n\n\n\n\n\n\nSummary of selected number fields: num, sum, min, max, mean, stdev (\nstat2\n)\n\n\n$ cat digitals.tsv\n4       5       6\n1       2       3\n7       8       0\n8       1,000   4\n\n$ cat digitals.tsv | csvtk stat2 -t -H -f 1-3\nfield   num     sum   min     max     mean    stdev\n1         4      20     1       8        5     3.16\n2         4   1,015     2   1,000   253.75   497.51\n3         4      13     0       6     3.25      2.5\n\n\n\n\n\n\n\nSelect fields/columns (\ncut\n)\n\n\n\n\nBy index: \ncsvtk cut -f 1,2\n\n\nBy names: \ncsvtk cut -f first_name,username\n\n\nUnselect\n: \ncsvtk cut -f -1,-2\n or \ncsvtk cut -f -first_name\n\n\nFuzzy fields\n: \ncsvtk cut -F -f \"*_name,username\"\n\n\nField ranges: \ncsvtk cut -f 2-4\n for column 2,3,4 or \ncsvtk cut -f -3--1\n for discarding column 1,2,3\n\n\nAll fields: \ncsvtk cut -F -f \"*\"\n\n\n\n\n\n\n\n\nSearch by selected fields (\ngrep\n) (matched parts will be highlighted as red)\n\n\n\n\nBy exactly matching: \ncsvtk grep -f first_name -p Robert -p Rob\n\n\nBy regular expression: \ncsvtk grep -f first_name -r -p Rob\n\n\nBy pattern list: \ncsvtk grep -f first_name -P name_list.txt\n\n\nRemore rows containing missing data (NA): \ncsvtk grep -F -f \"*\" -r -p \"^$\" -v\n\n\n\n\n\n\n\n\nRename column names (\nrename\n and \nrename2\n)\n\n\n\n\nSetting new names: \ncsvtk rename -f A,B -n a,b\n or \ncsvtk rename -f 1-3 -n a,b,c\n\n\nReplacing with original names by regular express: \ncat ../testdata/c.csv | ./csvtk rename2 -F -f \"*\" -p \"(.*)\" -r 'prefix_$1'\n for adding prefix to all column names.\n\n\n\n\n\n\n\n\nEdit data with regular expression (\nreplace\n)\n\n\n\n\nRemove Chinese charactors:  \ncsvtk replace -F -f \"*_name\" -p \"\\p{Han}+\" -r \"\"\n\n\n\n\n\n\n\n\nCreate new column from selected fields by regular expression (\nmutate\n)\n\n\n\n\nIn default, copy a column: \ncsvtk mutate -f id\n\n\nExtract prefix of data as group name (get \"A\" from \"A.1\" as group name):\n  \ncsvtk mutate -f sample -n group -p \"^(.+?)\\.\"\n\n\n\n\n\n\n\n\nSort by multiple keys (\nsort\n)\n\n\n\n\nBy single column : \ncsvtk sort -k 1\n or \ncsvtk sort -k last_name\n\n\nBy multiple columns: \ncsvtk sort -k 1,2\n or \ncsvtk sort -k 1 -k 2\n or \ncsvtk sort -k last_name,age\n\n\nSort by number: \ncsvtk sort -k 1:n\n or  \ncsvtk sort -k 1:nr\n for reverse number\n\n\nComplex sort: \ncsvtk sort -k region -k age:n -k id:nr\n\n\n\n\n\n\n\n\nJoin multiple files by keys (\njoin\n)\n\n\n\n\nAll files have same key column: \ncsvtk join -f id file1.csv file2.csv\n\n\nFiles have different key columns: \ncsvtk join -f \"username;username;name\" names.csv phone.csv adress.csv -k\n\n\n\n\n\n\n\n\nFilter by numbers (\nfilter\n)\n\n\n\n\nsingle field: \ncsvtk filter -f \"id\n0\"\n\n\nmultiple fields: \ncsvtk filter -f \"1-3\n0\"\n\n\nusing \n--any\n to print record if any of the field satisfy the condition: \ncsvtk filter -f \"1-3\n0\" --any\n\n\nfuzzy fields: \ncsvtk filter -F -f \"A*!=0\"\n\n\n\n\n\n\n\n\nContact\n\n\nEmail me for any problem when using \ncsvtk\n. shenwei356(at)gmail.com\n\n\nOr \ncreate an issue\n to report bugs,\npropose new functions or ask for help.\n\n\nOr \nleave a comment\n.\n\n\nLicense\n\n\nMIT License", 
            "title": "Home"
        }, 
        {
            "location": "/#csvtk", 
            "text": "Another cross-platform, efficient, practical and pretty CSV/TSV toolkit  Yes, you could just use spreadsheet softwares like MS excel to\ndo most of the job.  Howerver it's all by clicking and typing, which is  not\nautomatically and time-consuming to repeate , especially when we want to\napply similar operations with different datasets or purposes.  csvtk  is  convenient for rapid investigation\nand also easy to integrated into analysis pipelines .\n It could save you much time of writting scripts.  Hope it be helpful to you.", 
            "title": "csvtk"
        }, 
        {
            "location": "/#features", 
            "text": "Cross-platform  (Linux/Windows/Mac OS X/OpenBSD/FreeBSD)  Light weight and out-of-the-box, no dependencies, no compilation, no configuration  Fast ,   multiple-CPUs supported  Practical functions supported by N subcommands  Support STDIN and gziped input/output file, easy being used in pipe  Most of the subcommands support  unselecting fields  and  fuzzy fields ,\n  e.g.  -f \"-id,-name\"  for all fields except \"id\" and \"name\",\n   -F -f \"a.*\"  for all fields with prefix \"a.\".", 
            "title": "Features"
        }, 
        {
            "location": "/#subcommands", 
            "text": "19 in total.  Information   stat  summary of CSV file  stat2  summary of selected number fields   Format convertion   pretty  convert CSV to readable aligned table  csv2tab  convert CSV to tabular format  tab2csv  convert tabular format to CSV  space2tab  convert space delimited format to CSV  transpose  transpose CSV data  csv2md  convert CSV to markdown format   Set operations   cut  select parts of fields  uniq  unique data without sorting  inter  intersection of multiple files  grep  grep data by selected fields with patterns/regular expressions  filter  filter data by values of selected fields with math expression  join  join multiple CSV files by selected fields   Edit   rename  rename column names  rename2  rename column names by regular expression  replace  replace data of selected fields by regular expression  mutate  create new columns from selected fields by regular expression   Ordering   sort  sort by selected fields", 
            "title": "Subcommands"
        }, 
        {
            "location": "/#installation", 
            "text": "Download Page  Just  download  gzip-compressed\nexecutable file of your operating system, and uncompress it with  gzip -d *.gz  command,\nrename it to  csvtk.exe  (Windows) or  csvtk  (other operating systems) for convenience.  You may need to add executable permision by  chmod a+x csvtk .  You can also add the directory of the executable file to environment variable PATH , so you can run  csvtk  anywhere.    For windows, the simplest way is copy it to  C:\\WINDOWS\\system32 .    For Linux, type:  chmod a+x /PATH/OF/FASTCOV/csvtk\necho export PATH=\\$PATH:/PATH/OF/FASTCOV   ~/.bashrc  or simply copy it to  /usr/local/bin", 
            "title": "Installation"
        }, 
        {
            "location": "/#compared-to-csvkit", 
            "text": "csvkit     Features  csvtk  csvkit  Note      Read    Gzip  Yes  Yes     Fields ranges  Yes  Yes  e.g.  -f 1-4,6    Unselect fileds  Yes  --  e.g.  -1  for excluding first column    Fuzzy fields  Yes  --  e.g.  ab*  for columns with prefix \"ab\"    Order-specific fields  --  Yes  it means  1,2  is different from  2,1    Rename columns  Yes  --  rename with new name(s) or from existed names    Sort by multiple keys  Yes  Yes  bash sort like operations    Sort by number  Yes  --  e.g.  -k 1:n    Multiple sort  Yes  --  e.g.  -k 2:r -k 1:nr    Pretty output  Yes  --  convert CSV to readable aligned table     Similar tools:   csvkit  - A suite of utilities for converting to and working with CSV, the king of tabular file formats. http://csvkit.rtfd.org/  xsv  - A fast CSV toolkit written in Rust.  miller  - Miller is like sed, awk, cut, join, and sort for \nname-indexed data such as CSV and tabular JSON http://johnkerl.org/miller  tsv-utils-dlang  - Command line utilities for tab-separated value files written in the D programming language.", 
            "title": "Compared to csvkit"
        }, 
        {
            "location": "/#examples", 
            "text": "Attention   The CSV parser requires all the lines have same number of fields/columns.\n    Even lines with spaces will cause error.  By default, csvtk thinks your files have header row, if not, use \"-H\".  By default, lines starting with '#' will be ignored, if the header row\n    starts with '#', please assign \"-C\" another rare symbol, e.g. '$'.  By default, csvtk handles CSV files, use \"-t\" for tab-delimited files.  If \" exists in tab-delimited files, use \"-l\".   More  examples  and  tutorial  Examples    Pretty result  $ csvtk pretty names.csv\nid   first_name   last_name   username\n11   Rob          Pike        rob\n2    Ken          Thompson    ken\n4    Robert       Griesemer   gri\n1    Robert       Thompson    abc\nNA   Robert       Abel        123    Summary of selected number fields: num, sum, min, max, mean, stdev ( stat2 )  $ cat digitals.tsv\n4       5       6\n1       2       3\n7       8       0\n8       1,000   4\n\n$ cat digitals.tsv | csvtk stat2 -t -H -f 1-3\nfield   num     sum   min     max     mean    stdev\n1         4      20     1       8        5     3.16\n2         4   1,015     2   1,000   253.75   497.51\n3         4      13     0       6     3.25      2.5    Select fields/columns ( cut )   By index:  csvtk cut -f 1,2  By names:  csvtk cut -f first_name,username  Unselect :  csvtk cut -f -1,-2  or  csvtk cut -f -first_name  Fuzzy fields :  csvtk cut -F -f \"*_name,username\"  Field ranges:  csvtk cut -f 2-4  for column 2,3,4 or  csvtk cut -f -3--1  for discarding column 1,2,3  All fields:  csvtk cut -F -f \"*\"     Search by selected fields ( grep ) (matched parts will be highlighted as red)   By exactly matching:  csvtk grep -f first_name -p Robert -p Rob  By regular expression:  csvtk grep -f first_name -r -p Rob  By pattern list:  csvtk grep -f first_name -P name_list.txt  Remore rows containing missing data (NA):  csvtk grep -F -f \"*\" -r -p \"^$\" -v     Rename column names ( rename  and  rename2 )   Setting new names:  csvtk rename -f A,B -n a,b  or  csvtk rename -f 1-3 -n a,b,c  Replacing with original names by regular express:  cat ../testdata/c.csv | ./csvtk rename2 -F -f \"*\" -p \"(.*)\" -r 'prefix_$1'  for adding prefix to all column names.     Edit data with regular expression ( replace )   Remove Chinese charactors:   csvtk replace -F -f \"*_name\" -p \"\\p{Han}+\" -r \"\"     Create new column from selected fields by regular expression ( mutate )   In default, copy a column:  csvtk mutate -f id  Extract prefix of data as group name (get \"A\" from \"A.1\" as group name):\n   csvtk mutate -f sample -n group -p \"^(.+?)\\.\"     Sort by multiple keys ( sort )   By single column :  csvtk sort -k 1  or  csvtk sort -k last_name  By multiple columns:  csvtk sort -k 1,2  or  csvtk sort -k 1 -k 2  or  csvtk sort -k last_name,age  Sort by number:  csvtk sort -k 1:n  or   csvtk sort -k 1:nr  for reverse number  Complex sort:  csvtk sort -k region -k age:n -k id:nr     Join multiple files by keys ( join )   All files have same key column:  csvtk join -f id file1.csv file2.csv  Files have different key columns:  csvtk join -f \"username;username;name\" names.csv phone.csv adress.csv -k     Filter by numbers ( filter )   single field:  csvtk filter -f \"id 0\"  multiple fields:  csvtk filter -f \"1-3 0\"  using  --any  to print record if any of the field satisfy the condition:  csvtk filter -f \"1-3 0\" --any  fuzzy fields:  csvtk filter -F -f \"A*!=0\"", 
            "title": "Examples"
        }, 
        {
            "location": "/#contact", 
            "text": "Email me for any problem when using  csvtk . shenwei356(at)gmail.com  Or  create an issue  to report bugs,\npropose new functions or ask for help.  Or  leave a comment .", 
            "title": "Contact"
        }, 
        {
            "location": "/#license", 
            "text": "MIT License", 
            "title": "License"
        }, 
        {
            "location": "/download/", 
            "text": "Download\n\n\ncsvtk\n is implemented in \nGolang\n programming language,\n executable binary files \nfor most popular operating system\n are freely available\n  in \nrelease\n page.\n\n\nCurrent Version\n\n\n\n\ncsvtk v0.3.3\n\n\nfix bug of \ncsvtk grep -t -P\n\n\n\n\n\n\n\n\nInstallation\n\n\nDownload Page\n\n\nJust \ndownload\n gzip-compressed\nexecutable file of your operating system, and uncompress it with \ngzip -d *.gz\n command,\nrename it to \ncsvtk.exe\n (Windows) or \ncsvtk\n (other operating systems) for convenience.\n\n\nYou may need to add executable permision by \nchmod a+x csvtk\n.\n\n\nYou can also add the directory of the executable file to environment variable\n\nPATH\n, so you can run \ncsvtk\n anywhere.\n\n\n\n\n\n\nFor windows, the simplest way is copy it to \nC:\\WINDOWS\\system32\n.\n\n\n\n\n\n\nFor Linux, type:\n\n\nchmod a+x /PATH/OF/FASTCOV/csvtk\necho export PATH=\\$PATH:/PATH/OF/FASTCOV \n ~/.bashrc\n\n\n\nor simply copy it to \n/usr/local/bin\n\n\n\n\n\n\nPrevious Versions\n\n\n\n\ncsvtk v0.3.2\n\n\nfix bug of \ninter\n\n\n\n\n\n\ncsvtk v0.3.1\n\n\nadd support of search multiple fields for \ngrep\n\n\n\n\n\n\ncsvtk v0.3\n\n\nadd subcommand \ncsv2md\n\n\n\n\n\n\ncsvtk v0.2.9\n\n\nadd more flags to subcommand \npretty\n\n\nfix bug of \ncsvtk cut -n\n\n\nadd subcommand \nfilter\n\n\n\n\n\n\ncsvtk v0.2.8\n\n\nadd subcommand \npretty\n -- convert CSV to readable aligned table\n\n\n\n\n\n\ncsvtk v0.2.7\n\n\nfix highlight failing in windows\n\n\n\n\n\n\ncsvtk v0.2.6\n\n\nfix one error message of \ngrep\n\n\nhighlight matched fields in result of \ngrep\n\n\n\n\n\n\ncsvtk v0.2.5\n\n\nfix bug of \nstat\n that failed to considerate files with header row\n\n\nadd subcommand \nstat2\n - summary of selected number fields\n\n\nmake the output of \nstat\n prettier\n\n\n\n\n\n\ncsvtk v0.2.4\n\n\nfix bug of handling comment lines\n\n\nadd some notes before using csvtk\n\n\n\n\n\n\ncsvtk v0.2.3\n\n\nadd flag \n--colnames\n to \ncut\n\n\nflag \n-f\n (\n--fields\n) of \njoin\n supports single value now\n\n\n\n\n\n\ncsvtk v0.2.2\n\n\nadd flag \n--keep-unmathed\n to \njoin\n\n\n\n\n\n\ncsvtk v0.2\n\n\nfinish almost functions\n\n\n\n\n\n\ncsvtk v0.2.1\n\n\nfix bug of \nmutate\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n* RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.\n* LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables\n*/\n/*\nvar disqus_config = function () {\nthis.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable\nthis.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable\n};\n*/\n(function() { // DON'T EDIT BELOW THIS LINE\nvar d = document, s = d.createElement('script');\n\ns.src = '//csvtk.disqus.com/embed.js';\n\ns.setAttribute('data-timestamp', +new Date());\n(d.head || d.body).appendChild(s);\n})();\n\n\n\n\nPlease enable JavaScript to view the \ncomments powered by Disqus.", 
            "title": "Download"
        }, 
        {
            "location": "/download/#download", 
            "text": "csvtk  is implemented in  Golang  programming language,\n executable binary files  for most popular operating system  are freely available\n  in  release  page.", 
            "title": "Download"
        }, 
        {
            "location": "/download/#current-version", 
            "text": "csvtk v0.3.3  fix bug of  csvtk grep -t -P", 
            "title": "Current Version"
        }, 
        {
            "location": "/download/#installation", 
            "text": "Download Page  Just  download  gzip-compressed\nexecutable file of your operating system, and uncompress it with  gzip -d *.gz  command,\nrename it to  csvtk.exe  (Windows) or  csvtk  (other operating systems) for convenience.  You may need to add executable permision by  chmod a+x csvtk .  You can also add the directory of the executable file to environment variable PATH , so you can run  csvtk  anywhere.    For windows, the simplest way is copy it to  C:\\WINDOWS\\system32 .    For Linux, type:  chmod a+x /PATH/OF/FASTCOV/csvtk\necho export PATH=\\$PATH:/PATH/OF/FASTCOV   ~/.bashrc  or simply copy it to  /usr/local/bin", 
            "title": "Installation"
        }, 
        {
            "location": "/download/#previous-versions", 
            "text": "csvtk v0.3.2  fix bug of  inter    csvtk v0.3.1  add support of search multiple fields for  grep    csvtk v0.3  add subcommand  csv2md    csvtk v0.2.9  add more flags to subcommand  pretty  fix bug of  csvtk cut -n  add subcommand  filter    csvtk v0.2.8  add subcommand  pretty  -- convert CSV to readable aligned table    csvtk v0.2.7  fix highlight failing in windows    csvtk v0.2.6  fix one error message of  grep  highlight matched fields in result of  grep    csvtk v0.2.5  fix bug of  stat  that failed to considerate files with header row  add subcommand  stat2  - summary of selected number fields  make the output of  stat  prettier    csvtk v0.2.4  fix bug of handling comment lines  add some notes before using csvtk    csvtk v0.2.3  add flag  --colnames  to  cut  flag  -f  ( --fields ) of  join  supports single value now    csvtk v0.2.2  add flag  --keep-unmathed  to  join    csvtk v0.2  finish almost functions    csvtk v0.2.1  fix bug of  mutate      \n/**\n* RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.\n* LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables\n*/\n/*\nvar disqus_config = function () {\nthis.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable\nthis.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable\n};\n*/\n(function() { // DON'T EDIT BELOW THIS LINE\nvar d = document, s = d.createElement('script');\n\ns.src = '//csvtk.disqus.com/embed.js';\n\ns.setAttribute('data-timestamp', +new Date());\n(d.head || d.body).appendChild(s);\n})();  Please enable JavaScript to view the  comments powered by Disqus.", 
            "title": "Previous Versions"
        }, 
        {
            "location": "/usage/", 
            "text": "Usage and Examples\n\n\nBefore use\n\n\nAttention\n\n\n\n\nThe CSV parser requires all the lines have same number of fields/columns.\n    Even lines with spaces will cause error.\n\n\nBy default, csvtk thinks your files have header row, if not, use \"-H\".\n\n\nBy default, lines starting with '#' will be ignored, if the header row\n    starts with '#', please assign \"-C\" another rare symbol, e.g. '$'.\n\n\nBy default, csvtk handles CSV files, use \"-t\" for tab-delimited files.\n\n\nIf \" exists in tab-delimited files, use \"-l\".\n\n\n\n\ncsvkit\n\n\nUsage\n\n\nAnother cross-platform, efficient and practical CSV/TSV toolkit\n\nVersion: 0.3.2\n\nAuthor: Wei Shen \nshenwei356@gmail.com\n\n\nDocuments  : http://shenwei356.github.io/csvtk\nSource code: https://github.com/shenwei356/csvtk\n\nAttention:\n\n  1. The CSV parser requires all the lines have same number of fields/columns.\n     Even lines with spaces will cause error.\n  2. By default, csvtk thinks your files have header row, if not, use \n-H\n.\n  3. By default, lines starting with '#' will be ignored, if the header row\n     starts with '#', please assign \n-C\n another rare symbol, e.g. '$'.\n  4. By default, csvtk handles CSV files, use \n-t\n for tab-delimited files.\n  5. If \n exists in tab-delimited files, use \n-l\n.\n\nUsage:\n  csvtk [command]\n\nAvailable Commands:\n  csv2md      convert CSV to markdown format\n  csv2tab     convert CSV to tabular format\n  cut         select parts of fields\n  filter      filter data by values of selected fields with math expression\n  grep        grep data by selected fields with patterns/regular expressions\n  inter       intersection of multiple files\n  join        join multiple CSV files by selected fields\n  mutate      create new column from selected fields by regular expression\n  pretty      convert CSV to readable aligned table\n  rename      rename column names\n  rename2     rename column names by regular expression\n  replace     replace data of selected fields by regular expression\n  sort        sort by selected fields\n  space2tab   convert space delimited format to CSV\n  stat        summary of CSV file\n  stat2       summary of selected number fields\n  tab2csv     convert tabular format to CSV\n  transpose   transpose CSV data\n  uniq        unique data without sorting\n\nFlags:\n  -c, --chunk-size int         chunk size of CSV reader (default 50)\n  -C, --comment-char string    lines starting with commment-character will be ignored. if your header row starts with '#', please assign \n-C\n another rare symbol, e.g. '$' (default \n#\n)\n  -d, --delimiter string       delimiting character of the input CSV file (default \n,\n)\n  -l, --lazy-quotes            if given, a quote may appear in an unquoted field and a non-doubled quote may appear in a quoted field\n  -H, --no-header-row          specifies that the input CSV file does not have header row\n  -j, --num-cpus int           number of CPUs to use (default value depends on your computer) (default 4)\n  -D, --out-delimiter string   delimiting character of the input CSV file (default \n,\n)\n  -o, --out-file string        out file (\n-\n for stdout, suffix .gz for gzipped out) (default \n-\n)\n  -T, --out-tabs               specifies that the output is delimited with tabs. Overrides \n-D\n\n  -t, --tabs                   specifies that the input CSV file is delimited with tabs. Overrides \n-d\n\n\nUse \ncsvtk [command] --help\n for more information about a command.\n\n\n\n\n\nstat\n\n\nUsage\n\n\nsummary of CSV file\n\nUsage:\n  csvtk stat [flags]\n\n\n\n\n\nExamples\n\n\n\n\n\n\nwith header row\n\n\n$ cat names.csv\nid,first_name,last_name,username\n11,\"Rob\",\"Pike\",rob\n2,Ken,Thompson,ken\n4,\"Robert\",\"Griesemer\",\"gri\"\n1,\"Robert\",\"Thompson\",\"abc\"\nNA,\"Robert\",\"Abel\",\"123\"\n\n$ cat names.csv | csvtk stat\nfile   num_cols   num_rows\n-             4          5\n\n\n\n\n\n\n\nno header row\n\n\n$ cat digitals.tsv\n4       5       6\n1       2       3\n7       8       0\n8       1,000   4\n\n$ cat digitals.tsv | csvtk stat -t -H\nfile   num_cols   num_rows\n-             3          4\n\n\n\n\n\n\n\nstat2\n\n\nUsage\n\n\nsummary of selected number fields: num, sum, min, max, mean, stdev\n\nUsage:\n  csvtk stat2 [flags]\n\nFlags:\n  -f, --fields string   select only these fields. e.g -f 1,2 or -f columnA,columnB\n  -F, --fuzzy-fields    using fuzzy fields, e.g. *name or id123*\n\n\n\n\n\nExamples\n\n\n\n\n\n\nsimplest one\n\n\n$ seq 1 5 | csvtk stat2 -H -f 1\nfield   num   sum   min   max   mean   stdev\n1         5    15     1     5      3    1.58\n\n\n\n\n\n\n\nmultiple fields\n\n\n$ cat digitals.tsv\n4       5       6\n1       2       3\n7       8       0\n8       1,000   4\n\n$ cat digitals.tsv | csvtk stat2 -t -H -f 1-3\nfield   num     sum   min     max     mean    stdev\n1         4      20     1       8        5     3.16\n2         4   1,015     2   1,000   253.75   497.51\n3         4      13     0       6     3.25      2.5\n\n\n\n\n\n\n\npretty\n\n\nUsage\n\n\nconvert CSV to readable aligned table\n\nUsage:\n  csvtk pretty [flags]\n\nFlags:\n  -r, --align-right        align right\n  -W, --max-width int      max width\n  -w, --min-width int      min width\n  -s, --separator string   fields/columns separator (default \n   \n)\n\n\n\n\n\nExamples:\n\n\n\n\n\n\ndefault\n\n\n$ csvtk pretty names.csv\nid   first_name   last_name   username\n11   Rob          Pike        rob\n2    Ken          Thompson    ken\n4    Robert       Griesemer   gri\n1    Robert       Thompson    abc\nNA   Robert       Abel        123\n\n\n\n\n\n\n\nalign right\n\n\n$ csvtk pretty names.csv -r\nid   first_name   last_name   username\n11          Rob        Pike        rob\n 2          Ken    Thompson        ken\n 4       Robert   Griesemer        gri\n 1       Robert    Thompson        abc\nNA       Robert        Abel        123\n\n\n\n\n\n\n\ncustom separator\n\n\n$ csvtk pretty names.csv -s \" | \"\nid | first_name | last_name | username\n11 | Rob        | Pike      | rob\n2  | Ken        | Thompson  | ken\n4  | Robert     | Griesemer | gri\n1  | Robert     | Thompson  | abc\nNA | Robert     | Abel      | 123\n\n\n\n\n\n\n\ntranspose\n\n\nUsage\n\n\ntranspose CSV data\n\nUsage:\n  csvtk transpose [flags]\n\n\n\n\n\nExamples\n\n\n$ cat digitals.tsv\n4       5       6                                                                                  \n1       2       3                                                                                  \n7       8       0\n8       1,000   4\n\n$ csvtk transpose -t digitals.tsv\n4       1       7       8\n5       2       8       1,000\n6       3       0       4\n\n\n\ncsv2md\n\n\nUsage\n\n\nconvert CSV to markdown format\n\nUsage:\n  csvtk csv2md [flags]\n\nFlags:\n  -a, --alignments string   comma separated alignments. e.g. -a l,c,c,c or -a c\n  -w, --min-width int       min width (default 3)\n\n\n\n\n\nExamples\n\n\n\n\n\n\ngive single alignment symbol\n\n\n$ cat names.csv | csvtk csv2md -a left\nid |first_name|last_name|username\n:--|:---------|:--------|:-------\n11 |Rob       |Pike     |rob\n2  |Ken       |Thompson |ken\n4  |Robert    |Griesemer|gri\n1  |Robert    |Thompson |abc\nNA |Robert    |Abel     |12\n\n\n\nresult:\n\n\n\n\n\n\n\n\nid\n\n\nfirst_name\n\n\nlast_name\n\n\nusername\n\n\n\n\n\n\n\n\n\n\n11\n\n\nRob\n\n\nPike\n\n\nrob\n\n\n\n\n\n\n2\n\n\nKen\n\n\nThompson\n\n\nken\n\n\n\n\n\n\n4\n\n\nRobert\n\n\nGriesemer\n\n\ngri\n\n\n\n\n\n\n1\n\n\nRobert\n\n\nThompson\n\n\nabc\n\n\n\n\n\n\nNA\n\n\nRobert\n\n\nAbel\n\n\n12\n\n\n\n\n\n\n\n\n\n\n\n\ngive alignment symbols of all fields\n\n\n$ cat names.csv | csvtk csv2md -a c,l,l,l\nid |first_name|last_name|username\n:-:|:---------|:--------|:-------\n11 |Rob       |Pike     |rob\n2  |Ken       |Thompson |ken\n4  |Robert    |Griesemer|gri\n1  |Robert    |Thompson |abc\nNA |Robert    |Abel     |123\n\n\n\nresult\n\n\n\n\n\n\n\n\nid\n\n\nfirst_name\n\n\nlast_name\n\n\nusername\n\n\n\n\n\n\n\n\n\n\n11\n\n\nRob\n\n\nPike\n\n\nrob\n\n\n\n\n\n\n2\n\n\nKen\n\n\nThompson\n\n\nken\n\n\n\n\n\n\n4\n\n\nRobert\n\n\nGriesemer\n\n\ngri\n\n\n\n\n\n\n1\n\n\nRobert\n\n\nThompson\n\n\nabc\n\n\n\n\n\n\nNA\n\n\nRobert\n\n\nAbel\n\n\n123\n\n\n\n\n\n\n\n\n\n\n\n\ncut\n\n\nUsage\n\n\nselect parts of fields\n\nUsage:\n  csvtk cut [flags]\n\nFlags:\n  -n, --colnames        print column names\n  -f, --fields string   select only these fields. e.g -f 1,2 or -f columnA,columnB\n  -F, --fuzzy-fields    using fuzzy fields, e.g. *name or id123*\n\n\n\n\n\nExamples\n\n\n\n\nPrint colnames: \ncsvtk cut -n\n\n\nBy index: \ncsvtk cut -f 1,2\n\n\nBy names: \ncsvtk cut -f first_name,username\n\n\nUnselect\n: \ncsvtk cut -f -1,-2\n or \ncsvtk cut -f -first_name\n\n\nFuzzy fields\n: \ncsvtk cut -F -f \"*_name,username\"\n\n\nField ranges: \ncsvtk cut -f 2-4\n for column 2,3,4 or \ncsvtk cut -f -3--1\n for discarding column 1,2,3\n\n\nAll fields: \ncsvtk cut -F -f \"*\"\n\n\n\n\nuniq\n\n\nUsage\n\n\nunique data without sorting\n\nUsage:\n  csvtk uniq [flags]\n\nFlags:\n  -f, --fields string   select only these fields. e.g -f 1,2 or -f columnA,columnB (default \n1\n)\n  -F, --fuzzy-fields    using fuzzy fileds, e.g. *name or id123*\n  -i, --ignore-case     ignore case\n\n\n\n\n\ninter\n\n\nUsage\n\n\nintersection of multiple files\n\nUsage:\n  csvtk inter [flags]\n\nFlags:\n  -f, --fields string   select only these fields. e.g -f 1,2 or -f columnA,columnB (default \n1\n)\n  -F, --fuzzy-fields    using fuzzy fileds, e.g. *name or id123*\n  -i, --ignore-case     ignore case\n\n\n\n\n\ngrep\n\n\nUsage\n\n\ngrep data by selected fields with patterns/regular expressions\n\nUsage:\n  csvtk grep [flags]\n\nFlags:\n  -f, --fields string         comma separated key fields, column name or index. e.g. -f 1-3 or -f id,id2 or -F -f \ngroup*\n (default \n1\n)\n  -F, --fuzzy-fields          using fuzzy fields, e.g. *name or id123*\n  -i, --ignore-case           ignore case\n  -v, --invert                invert match\n  -n, --no-highlight          no highlight\n  -p, --pattern value         query pattern (multiple values supported) (default [])\n  -P, --pattern-file string   pattern files (could also be CSV format)\n  -r, --use-regexp            patterns are regular expression\n\n\n\n\n\nExamples\n\n\nMatched parts will be \nhighlight\n\n\n\n\n\n\nBy regular expression: \ncsvtk grep -f first_name -r -p Rob\n\n\n$ names.csv | csvtk grep -f first_name -r -p Rob | csvtk pretty\nid   first_name   last_name   username\n11   Rob          Pike        rob\n4    Robert       Griesemer   gri\n1    Robert       Thompson    abc\nNA   Robert       Abel        123\n\n\n\n\n\n\n\nBy pattern list: \ncsvtk grep -f first_name -P name_list.txt\n\n\n\n\nRemore rows containing missing data (NA): \ncsvtk grep -F -f \"*\" -r -p \"^$\" -v\n\n\n\n\nfilter\n\n\nUsage\n\n\nfilter data by values of selected fields with math expression\n\nUsage:\n  csvtk filter [flags]\n\nFlags:\n      --any             print record if any of the field satisfy the condition\n  -f, --filter string   filter condition. e.g. -f \nage\n12\n or -f \n1,3\n=2\n or -F -f \nc*!=0\n --or\n  -F, --fuzzy-fields    using fuzzy fileds, e.g. *name or id123*\n\n\n\n\n\nExamples\n\n\n\n\n\n\nsingle field\n\n\n$ cat names.csv\nid,first_name,last_name,username\n11,\"Rob\",\"Pike\",rob\n2,Ken,Thompson,ken\n4,\"Robert\",\"Griesemer\",\"gri\"\n1,\"Robert\",\"Thompson\",\"abc\"\nNA,\"Robert\",\"Abel\",\"123\"\n\n$ cat names.csv | csvtk filter -f \"id\n0\" | csvtk pretty\nid   first_name   last_name   username\n11   Rob          Pike        rob\n2    Ken          Thompson    ken\n4    Robert       Griesemer   gri\n1    Robert       Thompson    abc\n\n\n\n\n\n\n\nmultiple fields\n\n\n$ cat digitals.tsv\n4       5       6\n1       2       3\n7       8       0\n8       1,000   4\n\n$ cat digitals.tsv | csvtk -t -H filter -f \"1-3\n0\"\n4       5       6\n1       2       3\n8       1,000   4\n\n\n\nusing \n--any\n to print record if any of the field satisfy the condition\n\n\n$  cat digitals.tsv | csvtk -t -H filter -f \"1-3\n0\" --any\n4       5       6\n1       2       3\n7       8       0\n8       1,000   4\n\n\n\n\n\n\n\nfuzzy fields\n\n\n$  cat names.csv | csvtk filter -F -f \"i*!=0\"\nid,first_name,last_name,username\n11,Rob,Pike,rob\n2,Ken,Thompson,ken\n4,Robert,Griesemer,gri\n1,Robert,Thompson,abc\n\n\n\n\n\n\n\njoin\n\n\nUsage\n\n\njoin 2nd and later files to the first file by selected fields.\n\nMultiple keys supported, but the orders are ignored.\n\nUsage:\n  csvtk join [flags]\n\nFlags:\n  -f, --fields string    Semicolon seperated key fields of all files, if given one, we think all the files have the same key columns. e.g -f 1;2 or -f A,B;C,D or -f id (default \n1\n)\n  -F, --fuzzy-fields     using fuzzy fileds, e.g. *name or id123*\n  -i, --ignore-case      ignore case\n  -k, --keep-unmatched   keep unmatched data of the first file\n\n\n\n\n\nExamples:\n\n\n\n\nAll files have same key column: \ncsvtk join -f id file1.csv file2.csv\n\n\nFiles have different key columns: \ncsvtk join -f \"username;username;name\" names.csv phone.csv adress.csv -k\n\n\n\n\nrename\n\n\nUsage\n\n\nrename column names\n\nUsage:\n  csvtk rename [flags]\n\nFlags:\n  -f, --fields string   select only these fields. e.g -f 1,2 or -f columnA,columnB\n  -F, --fuzzy-fields    using fuzzy fileds, e.g. *name or id123*\n  -n, --names string    comma separated new names\n\n\n\n\n\nExamples:\n\n\n\n\nSetting new names: \ncsvtk rename -f A,B -n a,b\n or \ncsvtk rename -f 1-3 -n a,b,c\n\n\n\n\nrename2\n\n\nUsage\n\n\nrename column names by regular expression\n\nUsage:\n  csvtk rename2 [flags]\n\nFlags:\n  -f, --fields string        select only these fields. e.g -f 1,2 or -f columnA,columnB\n  -F, --fuzzy-fields         using fuzzy fileds, e.g. *name or id123*\n  -i, --ignore-case          ignore case\n  -p, --pattern string       search regular expression\n  -r, --replacement string   renamement. supporting capture variables.  e.g. $1 represents the text of the first submatch. ATTENTION: use SINGLE quote NOT double quotes in *nix OS or use the \\ escape character.\n\n\n\n\n\nExamples:\n\n\n\n\nreplacing with original names by regular express: \ncat ../testdata/c.csv | ./csvtk rename2 -F -f \"*\" -p \"(.*)\" -r 'prefix_$1'\n for adding prefix to all column names.\n\n\n\n\nreplace\n\n\nUsage\n\n\nreplace data of selected fields by regular expression\n\nUsage:\n  csvtk replace [flags]\n\nFlags:\n  -f, --fields string        select only these fields. e.g -f 1,2 or -f columnA,columnB (default \n1\n)\n  -F, --fuzzy-fields         using fuzzy fileds, e.g. *name or id123*\n  -i, --ignore-case          ignore case\n  -p, --pattern string       search regular expression\n  -r, --replacement string   replacement. supporting capture variables.  e.g. $1 represents the text of the first submatch. ATTENTION: use SINGLE quote NOT double quotes in *nix OS or use the \\ escape character.\n\n\n\n\n\nExamples\n\n\n\n\nremove Chinese charactors:  \ncsvtk replace -F -f \"*_name\" -p \"\\p{Han}+\" -r \"\"\n\n\n\n\nmutate\n\n\nUsage\n\n\ncreate new column from selected fields by regular expression\n\nUsage:\n  csvtk mutate [flags]\n\nFlags:\n  -f, --fields string    select only these fields. e.g -f 1,2 or -f columnA,columnB (default \n1\n)\n  -i, --ignore-case      ignore case\n      --na               for unmatched data, use blank instead of orginal data\n  -n, --name string      new column name\n  -p, --pattern string   search regular expression with capture bracket. e.g. (default \n^(.+)$\n)\n\n\n\n\n\nExamples\n\n\n\n\nIn default, copy a column: \ncsvtk mutate -f id -n newname\n\n\nextract prefix of data as group name (get \"A\" from \"A.1\" as group name):\n  \ncsvtk mutate -f sample -n group -p \"^(.+?)\\.\"\n\n\n\n\nsort\n\n\nUsage\n\n\nsort by selected fields\n\nUsage:\n  csvtk sort [flags]\n\nFlags:\n  -k, --keys value   keys. sort type supported, \nn\n for number and \nr\n for reverse. e.g. \n-k 1\n or \n-k A:r\n or \n-k 1:nr -k 2\n (default [1])\n\n\n\n\n\nExamples\n\n\n\n\nBy single column : \ncsvtk sort -k 1\n or \ncsvtk sort -k last_name\n\n\nBy multiple columns: \ncsvtk sort -k 1,2\n or \ncsvtk sort -k 1 -k 2\n or \ncsvtk sort -k last_name,age\n\n\nSort by number: \ncsvtk sort -k 1:n\n or  \ncsvtk sort -k 1:nr\n for reverse number\n\n\nComplex sort: \ncsvtk sort -k region -k age:n -k id:nr\n\n\n\n\n\n\n\n\n/**\n* RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.\n* LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables\n*/\n/*\nvar disqus_config = function () {\nthis.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable\nthis.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable\n};\n*/\n(function() { // DON'T EDIT BELOW THIS LINE\nvar d = document, s = d.createElement('script');\n\ns.src = '//csvtk.disqus.com/embed.js';\n\ns.setAttribute('data-timestamp', +new Date());\n(d.head || d.body).appendChild(s);\n})();\n\n\n\n\nPlease enable JavaScript to view the \ncomments powered by Disqus.", 
            "title": "Usage"
        }, 
        {
            "location": "/usage/#usage-and-examples", 
            "text": "", 
            "title": "Usage and Examples"
        }, 
        {
            "location": "/usage/#before-use", 
            "text": "Attention   The CSV parser requires all the lines have same number of fields/columns.\n    Even lines with spaces will cause error.  By default, csvtk thinks your files have header row, if not, use \"-H\".  By default, lines starting with '#' will be ignored, if the header row\n    starts with '#', please assign \"-C\" another rare symbol, e.g. '$'.  By default, csvtk handles CSV files, use \"-t\" for tab-delimited files.  If \" exists in tab-delimited files, use \"-l\".", 
            "title": "Before use"
        }, 
        {
            "location": "/usage/#csvkit", 
            "text": "Usage  Another cross-platform, efficient and practical CSV/TSV toolkit\n\nVersion: 0.3.2\n\nAuthor: Wei Shen  shenwei356@gmail.com \n\nDocuments  : http://shenwei356.github.io/csvtk\nSource code: https://github.com/shenwei356/csvtk\n\nAttention:\n\n  1. The CSV parser requires all the lines have same number of fields/columns.\n     Even lines with spaces will cause error.\n  2. By default, csvtk thinks your files have header row, if not, use  -H .\n  3. By default, lines starting with '#' will be ignored, if the header row\n     starts with '#', please assign  -C  another rare symbol, e.g. '$'.\n  4. By default, csvtk handles CSV files, use  -t  for tab-delimited files.\n  5. If   exists in tab-delimited files, use  -l .\n\nUsage:\n  csvtk [command]\n\nAvailable Commands:\n  csv2md      convert CSV to markdown format\n  csv2tab     convert CSV to tabular format\n  cut         select parts of fields\n  filter      filter data by values of selected fields with math expression\n  grep        grep data by selected fields with patterns/regular expressions\n  inter       intersection of multiple files\n  join        join multiple CSV files by selected fields\n  mutate      create new column from selected fields by regular expression\n  pretty      convert CSV to readable aligned table\n  rename      rename column names\n  rename2     rename column names by regular expression\n  replace     replace data of selected fields by regular expression\n  sort        sort by selected fields\n  space2tab   convert space delimited format to CSV\n  stat        summary of CSV file\n  stat2       summary of selected number fields\n  tab2csv     convert tabular format to CSV\n  transpose   transpose CSV data\n  uniq        unique data without sorting\n\nFlags:\n  -c, --chunk-size int         chunk size of CSV reader (default 50)\n  -C, --comment-char string    lines starting with commment-character will be ignored. if your header row starts with '#', please assign  -C  another rare symbol, e.g. '$' (default  # )\n  -d, --delimiter string       delimiting character of the input CSV file (default  , )\n  -l, --lazy-quotes            if given, a quote may appear in an unquoted field and a non-doubled quote may appear in a quoted field\n  -H, --no-header-row          specifies that the input CSV file does not have header row\n  -j, --num-cpus int           number of CPUs to use (default value depends on your computer) (default 4)\n  -D, --out-delimiter string   delimiting character of the input CSV file (default  , )\n  -o, --out-file string        out file ( -  for stdout, suffix .gz for gzipped out) (default  - )\n  -T, --out-tabs               specifies that the output is delimited with tabs. Overrides  -D \n  -t, --tabs                   specifies that the input CSV file is delimited with tabs. Overrides  -d \n\nUse  csvtk [command] --help  for more information about a command.", 
            "title": "csvkit"
        }, 
        {
            "location": "/usage/#stat", 
            "text": "Usage  summary of CSV file\n\nUsage:\n  csvtk stat [flags]  Examples    with header row  $ cat names.csv\nid,first_name,last_name,username\n11,\"Rob\",\"Pike\",rob\n2,Ken,Thompson,ken\n4,\"Robert\",\"Griesemer\",\"gri\"\n1,\"Robert\",\"Thompson\",\"abc\"\nNA,\"Robert\",\"Abel\",\"123\"\n\n$ cat names.csv | csvtk stat\nfile   num_cols   num_rows\n-             4          5    no header row  $ cat digitals.tsv\n4       5       6\n1       2       3\n7       8       0\n8       1,000   4\n\n$ cat digitals.tsv | csvtk stat -t -H\nfile   num_cols   num_rows\n-             3          4", 
            "title": "stat"
        }, 
        {
            "location": "/usage/#stat2", 
            "text": "Usage  summary of selected number fields: num, sum, min, max, mean, stdev\n\nUsage:\n  csvtk stat2 [flags]\n\nFlags:\n  -f, --fields string   select only these fields. e.g -f 1,2 or -f columnA,columnB\n  -F, --fuzzy-fields    using fuzzy fields, e.g. *name or id123*  Examples    simplest one  $ seq 1 5 | csvtk stat2 -H -f 1\nfield   num   sum   min   max   mean   stdev\n1         5    15     1     5      3    1.58    multiple fields  $ cat digitals.tsv\n4       5       6\n1       2       3\n7       8       0\n8       1,000   4\n\n$ cat digitals.tsv | csvtk stat2 -t -H -f 1-3\nfield   num     sum   min     max     mean    stdev\n1         4      20     1       8        5     3.16\n2         4   1,015     2   1,000   253.75   497.51\n3         4      13     0       6     3.25      2.5", 
            "title": "stat2"
        }, 
        {
            "location": "/usage/#pretty", 
            "text": "Usage  convert CSV to readable aligned table\n\nUsage:\n  csvtk pretty [flags]\n\nFlags:\n  -r, --align-right        align right\n  -W, --max-width int      max width\n  -w, --min-width int      min width\n  -s, --separator string   fields/columns separator (default      )  Examples:    default  $ csvtk pretty names.csv\nid   first_name   last_name   username\n11   Rob          Pike        rob\n2    Ken          Thompson    ken\n4    Robert       Griesemer   gri\n1    Robert       Thompson    abc\nNA   Robert       Abel        123    align right  $ csvtk pretty names.csv -r\nid   first_name   last_name   username\n11          Rob        Pike        rob\n 2          Ken    Thompson        ken\n 4       Robert   Griesemer        gri\n 1       Robert    Thompson        abc\nNA       Robert        Abel        123    custom separator  $ csvtk pretty names.csv -s \" | \"\nid | first_name | last_name | username\n11 | Rob        | Pike      | rob\n2  | Ken        | Thompson  | ken\n4  | Robert     | Griesemer | gri\n1  | Robert     | Thompson  | abc\nNA | Robert     | Abel      | 123", 
            "title": "pretty"
        }, 
        {
            "location": "/usage/#transpose", 
            "text": "Usage  transpose CSV data\n\nUsage:\n  csvtk transpose [flags]  Examples  $ cat digitals.tsv\n4       5       6                                                                                  \n1       2       3                                                                                  \n7       8       0\n8       1,000   4\n\n$ csvtk transpose -t digitals.tsv\n4       1       7       8\n5       2       8       1,000\n6       3       0       4", 
            "title": "transpose"
        }, 
        {
            "location": "/usage/#csv2md", 
            "text": "Usage  convert CSV to markdown format\n\nUsage:\n  csvtk csv2md [flags]\n\nFlags:\n  -a, --alignments string   comma separated alignments. e.g. -a l,c,c,c or -a c\n  -w, --min-width int       min width (default 3)  Examples    give single alignment symbol  $ cat names.csv | csvtk csv2md -a left\nid |first_name|last_name|username\n:--|:---------|:--------|:-------\n11 |Rob       |Pike     |rob\n2  |Ken       |Thompson |ken\n4  |Robert    |Griesemer|gri\n1  |Robert    |Thompson |abc\nNA |Robert    |Abel     |12  result:     id  first_name  last_name  username      11  Rob  Pike  rob    2  Ken  Thompson  ken    4  Robert  Griesemer  gri    1  Robert  Thompson  abc    NA  Robert  Abel  12       give alignment symbols of all fields  $ cat names.csv | csvtk csv2md -a c,l,l,l\nid |first_name|last_name|username\n:-:|:---------|:--------|:-------\n11 |Rob       |Pike     |rob\n2  |Ken       |Thompson |ken\n4  |Robert    |Griesemer|gri\n1  |Robert    |Thompson |abc\nNA |Robert    |Abel     |123  result     id  first_name  last_name  username      11  Rob  Pike  rob    2  Ken  Thompson  ken    4  Robert  Griesemer  gri    1  Robert  Thompson  abc    NA  Robert  Abel  123", 
            "title": "csv2md"
        }, 
        {
            "location": "/usage/#cut", 
            "text": "Usage  select parts of fields\n\nUsage:\n  csvtk cut [flags]\n\nFlags:\n  -n, --colnames        print column names\n  -f, --fields string   select only these fields. e.g -f 1,2 or -f columnA,columnB\n  -F, --fuzzy-fields    using fuzzy fields, e.g. *name or id123*  Examples   Print colnames:  csvtk cut -n  By index:  csvtk cut -f 1,2  By names:  csvtk cut -f first_name,username  Unselect :  csvtk cut -f -1,-2  or  csvtk cut -f -first_name  Fuzzy fields :  csvtk cut -F -f \"*_name,username\"  Field ranges:  csvtk cut -f 2-4  for column 2,3,4 or  csvtk cut -f -3--1  for discarding column 1,2,3  All fields:  csvtk cut -F -f \"*\"", 
            "title": "cut"
        }, 
        {
            "location": "/usage/#uniq", 
            "text": "Usage  unique data without sorting\n\nUsage:\n  csvtk uniq [flags]\n\nFlags:\n  -f, --fields string   select only these fields. e.g -f 1,2 or -f columnA,columnB (default  1 )\n  -F, --fuzzy-fields    using fuzzy fileds, e.g. *name or id123*\n  -i, --ignore-case     ignore case", 
            "title": "uniq"
        }, 
        {
            "location": "/usage/#inter", 
            "text": "Usage  intersection of multiple files\n\nUsage:\n  csvtk inter [flags]\n\nFlags:\n  -f, --fields string   select only these fields. e.g -f 1,2 or -f columnA,columnB (default  1 )\n  -F, --fuzzy-fields    using fuzzy fileds, e.g. *name or id123*\n  -i, --ignore-case     ignore case", 
            "title": "inter"
        }, 
        {
            "location": "/usage/#grep", 
            "text": "Usage  grep data by selected fields with patterns/regular expressions\n\nUsage:\n  csvtk grep [flags]\n\nFlags:\n  -f, --fields string         comma separated key fields, column name or index. e.g. -f 1-3 or -f id,id2 or -F -f  group*  (default  1 )\n  -F, --fuzzy-fields          using fuzzy fields, e.g. *name or id123*\n  -i, --ignore-case           ignore case\n  -v, --invert                invert match\n  -n, --no-highlight          no highlight\n  -p, --pattern value         query pattern (multiple values supported) (default [])\n  -P, --pattern-file string   pattern files (could also be CSV format)\n  -r, --use-regexp            patterns are regular expression  Examples  Matched parts will be  highlight    By regular expression:  csvtk grep -f first_name -r -p Rob  $ names.csv | csvtk grep -f first_name -r -p Rob | csvtk pretty\nid   first_name   last_name   username\n11   Rob          Pike        rob\n4    Robert       Griesemer   gri\n1    Robert       Thompson    abc\nNA   Robert       Abel        123    By pattern list:  csvtk grep -f first_name -P name_list.txt   Remore rows containing missing data (NA):  csvtk grep -F -f \"*\" -r -p \"^$\" -v", 
            "title": "grep"
        }, 
        {
            "location": "/usage/#filter", 
            "text": "Usage  filter data by values of selected fields with math expression\n\nUsage:\n  csvtk filter [flags]\n\nFlags:\n      --any             print record if any of the field satisfy the condition\n  -f, --filter string   filter condition. e.g. -f  age 12  or -f  1,3 =2  or -F -f  c*!=0  --or\n  -F, --fuzzy-fields    using fuzzy fileds, e.g. *name or id123*  Examples    single field  $ cat names.csv\nid,first_name,last_name,username\n11,\"Rob\",\"Pike\",rob\n2,Ken,Thompson,ken\n4,\"Robert\",\"Griesemer\",\"gri\"\n1,\"Robert\",\"Thompson\",\"abc\"\nNA,\"Robert\",\"Abel\",\"123\"\n\n$ cat names.csv | csvtk filter -f \"id 0\" | csvtk pretty\nid   first_name   last_name   username\n11   Rob          Pike        rob\n2    Ken          Thompson    ken\n4    Robert       Griesemer   gri\n1    Robert       Thompson    abc    multiple fields  $ cat digitals.tsv\n4       5       6\n1       2       3\n7       8       0\n8       1,000   4\n\n$ cat digitals.tsv | csvtk -t -H filter -f \"1-3 0\"\n4       5       6\n1       2       3\n8       1,000   4  using  --any  to print record if any of the field satisfy the condition  $  cat digitals.tsv | csvtk -t -H filter -f \"1-3 0\" --any\n4       5       6\n1       2       3\n7       8       0\n8       1,000   4    fuzzy fields  $  cat names.csv | csvtk filter -F -f \"i*!=0\"\nid,first_name,last_name,username\n11,Rob,Pike,rob\n2,Ken,Thompson,ken\n4,Robert,Griesemer,gri\n1,Robert,Thompson,abc", 
            "title": "filter"
        }, 
        {
            "location": "/usage/#join", 
            "text": "Usage  join 2nd and later files to the first file by selected fields.\n\nMultiple keys supported, but the orders are ignored.\n\nUsage:\n  csvtk join [flags]\n\nFlags:\n  -f, --fields string    Semicolon seperated key fields of all files, if given one, we think all the files have the same key columns. e.g -f 1;2 or -f A,B;C,D or -f id (default  1 )\n  -F, --fuzzy-fields     using fuzzy fileds, e.g. *name or id123*\n  -i, --ignore-case      ignore case\n  -k, --keep-unmatched   keep unmatched data of the first file  Examples:   All files have same key column:  csvtk join -f id file1.csv file2.csv  Files have different key columns:  csvtk join -f \"username;username;name\" names.csv phone.csv adress.csv -k", 
            "title": "join"
        }, 
        {
            "location": "/usage/#rename", 
            "text": "Usage  rename column names\n\nUsage:\n  csvtk rename [flags]\n\nFlags:\n  -f, --fields string   select only these fields. e.g -f 1,2 or -f columnA,columnB\n  -F, --fuzzy-fields    using fuzzy fileds, e.g. *name or id123*\n  -n, --names string    comma separated new names  Examples:   Setting new names:  csvtk rename -f A,B -n a,b  or  csvtk rename -f 1-3 -n a,b,c", 
            "title": "rename"
        }, 
        {
            "location": "/usage/#rename2", 
            "text": "Usage  rename column names by regular expression\n\nUsage:\n  csvtk rename2 [flags]\n\nFlags:\n  -f, --fields string        select only these fields. e.g -f 1,2 or -f columnA,columnB\n  -F, --fuzzy-fields         using fuzzy fileds, e.g. *name or id123*\n  -i, --ignore-case          ignore case\n  -p, --pattern string       search regular expression\n  -r, --replacement string   renamement. supporting capture variables.  e.g. $1 represents the text of the first submatch. ATTENTION: use SINGLE quote NOT double quotes in *nix OS or use the \\ escape character.  Examples:   replacing with original names by regular express:  cat ../testdata/c.csv | ./csvtk rename2 -F -f \"*\" -p \"(.*)\" -r 'prefix_$1'  for adding prefix to all column names.", 
            "title": "rename2"
        }, 
        {
            "location": "/usage/#replace", 
            "text": "Usage  replace data of selected fields by regular expression\n\nUsage:\n  csvtk replace [flags]\n\nFlags:\n  -f, --fields string        select only these fields. e.g -f 1,2 or -f columnA,columnB (default  1 )\n  -F, --fuzzy-fields         using fuzzy fileds, e.g. *name or id123*\n  -i, --ignore-case          ignore case\n  -p, --pattern string       search regular expression\n  -r, --replacement string   replacement. supporting capture variables.  e.g. $1 represents the text of the first submatch. ATTENTION: use SINGLE quote NOT double quotes in *nix OS or use the \\ escape character.  Examples   remove Chinese charactors:   csvtk replace -F -f \"*_name\" -p \"\\p{Han}+\" -r \"\"", 
            "title": "replace"
        }, 
        {
            "location": "/usage/#mutate", 
            "text": "Usage  create new column from selected fields by regular expression\n\nUsage:\n  csvtk mutate [flags]\n\nFlags:\n  -f, --fields string    select only these fields. e.g -f 1,2 or -f columnA,columnB (default  1 )\n  -i, --ignore-case      ignore case\n      --na               for unmatched data, use blank instead of orginal data\n  -n, --name string      new column name\n  -p, --pattern string   search regular expression with capture bracket. e.g. (default  ^(.+)$ )  Examples   In default, copy a column:  csvtk mutate -f id -n newname  extract prefix of data as group name (get \"A\" from \"A.1\" as group name):\n   csvtk mutate -f sample -n group -p \"^(.+?)\\.\"", 
            "title": "mutate"
        }, 
        {
            "location": "/usage/#sort", 
            "text": "Usage  sort by selected fields\n\nUsage:\n  csvtk sort [flags]\n\nFlags:\n  -k, --keys value   keys. sort type supported,  n  for number and  r  for reverse. e.g.  -k 1  or  -k A:r  or  -k 1:nr -k 2  (default [1])  Examples   By single column :  csvtk sort -k 1  or  csvtk sort -k last_name  By multiple columns:  csvtk sort -k 1,2  or  csvtk sort -k 1 -k 2  or  csvtk sort -k last_name,age  Sort by number:  csvtk sort -k 1:n  or   csvtk sort -k 1:nr  for reverse number  Complex sort:  csvtk sort -k region -k age:n -k id:nr    \n/**\n* RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.\n* LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables\n*/\n/*\nvar disqus_config = function () {\nthis.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable\nthis.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable\n};\n*/\n(function() { // DON'T EDIT BELOW THIS LINE\nvar d = document, s = d.createElement('script');\n\ns.src = '//csvtk.disqus.com/embed.js';\n\ns.setAttribute('data-timestamp', +new Date());\n(d.head || d.body).appendChild(s);\n})();  Please enable JavaScript to view the  comments powered by Disqus.", 
            "title": "sort"
        }, 
        {
            "location": "/tutorial/", 
            "text": "Tutorial\n\n\nForewords\n\n\nYes, you could just use spreadsheet softwares like MS excel to\ndo most of the job.\n\n\nHowerver it's all by clicking and typing, which is \nnot\nautomatically and time-consuming to repeate\n, especially when we want to\napply similar operations with different datasets or purposes.\n\n\ncsvtk\n is \nconvenient for rapid investigation\nand also easy to integrated into analysis pipelines\n.\n It could save you much time of writting scripts.\n\n\nHope it be helpful for you.\n\n\nAnalyzing OTU table\n\n\nData\n\n\nHere is mock a OTU table from 16S sequencing result.\nColumns are sample IDs in format of \"GROUP.ID\"\n\n\n    $ cat otu_table.csv\n    Taxonomy,A.1,A.2,A.3,B.1,B.2,B.3,C.1,C.2,C.3\n    Proteobacteria,.13,.29,.13,.16,.13,.22,.30,.23,.21\n    Firmicutes,.42,.06,.49,.41,.55,.41,.32,.38,.66\n    Bacteroidetes,.19,.62,.12,.33,.16,.29,.34,.35,.09\n    Deferribacteres,.17,.00,.24,.01,.01,.01,.01,.01,.02\n    Tenericutes,.00,.00,.00,.01,.03,.02,.00,.00,.00\n\n\n\nWhat's a mess. Let's make it prettier!\n\n\n    $ csvtk pretty otu_table.csv\n    Taxonomy          A.1   A.2   A.3   B.1   B.2   B.3   C.1   C.2   C.3\n    Proteobacteria    .13   .29   .13   .16   .13   .22   .30   .23   .21\n    Firmicutes        .42   .06   .49   .41   .55   .41   .32   .38   .66\n    Bacteroidetes     .19   .62   .12   .33   .16   .29   .34   .35   .09\n    Deferribacteres   .17   .00   .24   .01   .01   .01   .01   .01   .02\n    Tenericutes       .00   .00   .00   .01   .03   .02   .00   .00   .00\n\n\n\nSteps\n\n\n\n\n\n\nCounting\n\n\n$ csvtk stat otu_table.csv\nfile            num_cols   num_rows\notu_table.csv         10          5\n\n\n\n\n\n\n\nConvert to tab-delimited table\n\n\n$ csvtk csv2tab  otu_table.csv\nTaxonomy        A.1     A.2     A.3     B.1     B.2     B.3     C.1     C.2     C.3\nProteobacteria  .13     .29     .13     .16     .13     .22     .30     .23     .21\nFirmicutes      .42     .06     .49     .41     .55     .41     .32     .38     .66\nBacteroidetes   .19     .62     .12     .33     .16     .29     .34     .35     .09\nDeferribacteres .17     .00     .24     .01     .01     .01     .01     .01     .02\nTenericutes     .00     .00     .00     .01     .03     .02     .00     .00     .00\n\n\n\n\n\n\n\nColumn names\n\n\n$ csvtk cut -n otu_table.csv\n#field  colname\n1       Taxonomy\n2       A.1\n3       A.2\n4       A.3\n5       B.1\n6       B.2\n7       B.3\n8       C.1\n9       C.2\n10      C.3\n\n\n\n\n\n\n\nExtract data of group A and B and save to file \n-o otu_table.gAB.csv\n\n\n$ csvtk cut -F -f \"A.*,B.*,Taxonomy\" otu_table.csv -o otu_table.gAB.csv\n\n$ csvtk prety otu_table.gAB.csv\nTaxonomy          A.1   A.2   A.3   B.1   B.2   B.3\nProteobacteria    .13   .29   .13   .16   .13   .22\nFirmicutes        .42   .06   .49   .41   .55   .41\nBacteroidetes     .19   .62   .12   .33   .16   .29\nDeferribacteres   .17   .00   .24   .01   .01   .01\nTenericutes       .00   .00   .00   .01   .03   .02\n\n\n\n\n\n\n\nSearch some rows by fields. Matched parts will be highlighted as red\n\n\n$ csvtk grep -f Taxonomy -r -p \"tes\" otu_table.gAB.csv -T\n\n\n\nResult:\n\n\n\n\n\n\n\n\nTranspose\n\n\n$ csvtk transpose otu_table.gAB.csv -o otu_table.gAB.t.csv\n\n$ csvtk pretty otu_table.gAB.t.csv\nTaxonomy   Proteobacteria   Firmicutes   Bacteroidetes   Deferribacteres   Tenericutes\nA.1        .13              .42          .19             .17               .00\nA.2        .29              .06          .62             .00               .00\nA.3        .13              .49          .12             .24               .00\nB.1        .16              .41          .33             .01               .01\nB.2        .13              .55          .16             .01               .03\nB.3        .22              .41          .29             .01               .02\n\n\n\n\n\n\n\nRename first column\n\n\n$ csvtk rename -f 1 -n \"sample\" otu_table.gAB.t.csv -o otu_table.gAB.t.r.csv\n\n$ csvtk pretty otu_table.gAB.t.r.csv\nsample   Proteobacteria   Firmicutes   Bacteroidetes   Deferribacteres   Tenericutes\nA.1      .13              .42          .19             .17               .00\nA.2      .29              .06          .62             .00               .00\nA.3      .13              .49          .12             .24               .00\nB.1      .16              .41          .33             .01               .01\nB.2      .13              .55          .16             .01               .03\nB.3      .22              .41          .29             .01               .02\n\n\n\n\n\n\n\nAdd group column\n\n\n$ csvtk mutate -p \"(.+?)\\.\" -n group otu_table.gAB.t.r.csv -o otu_table2.csv\n\n$ csvtk pretty otu_table2.csv\nsample   Proteobacteria   Firmicutes   Bacteroidetes   Deferribacteres   Tenericutes   group\nA.1      .13              .42          .19             .17               .00           A\nA.2      .29              .06          .62             .00               .00           A\nA.3      .13              .49          .12             .24               .00           A\nB.1      .16              .41          .33             .01               .01           B\nB.2      .13              .55          .16             .01               .03           B\nB.3      .22              .41          .29             .01               .02           B\n\n\n\n\n\n\n\nRename groups:\n\n\n$ csvtk replace -f group -p \"A\" -r \"Ctrl\" otu_table2.csv | csvtk replace -f group -p \"B\" -r \"Treatment\" \n otu_table3.csv\n\n$ csvtk pretty otu_table3.csv\nsample   Proteobacteria   Firmicutes   Bacteroidetes   Deferribacteres   Tenericutes   group\nA.1      .13              .42          .19             .17               .00           Ctrl\nA.2      .29              .06          .62             .00               .00           Ctrl\nA.3      .13              .49          .12             .24               .00           Ctrl\nB.1      .16              .41          .33             .01               .01           Treatment\nB.2      .13              .55          .16             .01               .03           Treatment\nB.3      .22              .41          .29             .01               .02           Treatment\n\n\n\n\n\n\n\nStatistics of number data\n\n\n$ csvtk stat2 -f 2-6 otu_table3.csv\nfield             num    sum    min    max   mean   stdev\nProteobacteria      6   1.06   0.13   0.29   0.18    0.07\nFirmicutes          6   2.34   0.06   0.55   0.39    0.17\nBacteroidetes       6   1.71   0.12   0.62   0.28    0.18\nDeferribacteres     6   0.44      0   0.24   0.07     0.1\nTenericutes         6   0.06      0   0.03   0.01    0.01\n\n\n\nPlease don't be supprised at the \nsum\n, it's a mock otu table...\n\n\n\n\n\n\nSort by abundance of \nProteobacteria\n in descending order.\n\n\n$ csvtk sort -k Proteobacteria:nr otu_table3.csv | csvtk pretty\nsample   Proteobacteria   Firmicutes   Bacteroidetes   Deferribacteres   Tenericutes   group\nA.2      .29              .06          .62             .00               .00           Ctrl\nB.3      .22              .41          .29             .01               .02           Treatment\nB.1      .16              .41          .33             .01               .01           Treatment\nB.2      .13              .55          .16             .01               .03           Treatment\nA.3      .13              .49          .12             .24               .00           Ctrl\nA.1      .13              .42          .19             .17               .00           Ctrl\n\n\n\n\n\n\n\nSort by abundance of \nProteobacteria\n in descending order and \nFirmicutes\n in ascending order\n\n\n$ csvtk sort -k Proteobacteria:nr -k Firmicutes:n otu_table3.csv | csvtk pretty\nsample   Proteobacteria   Firmicutes   Bacteroidetes   Deferribacteres   Tenericutes   group\nA.2      .29              .06          .62             .00               .00           Ctrl\nB.3      .22              .41          .29             .01               .02           Treatment\nB.1      .16              .41          .33             .01               .01           Treatment\nA.1      .13              .42          .19             .17               .00           Ctrl\nA.3      .13              .49          .12             .24               .00           Ctrl\nB.2      .13              .55          .16             .01               .03           Treatment\n\n\n\n\n\n\n\nFilter samples with abundance greater than 0 in all taxons (columns except for sample and group, you can also use \n-f \"2-6\n0\"\n).\n\n\n$ cat otu_table3.csv | csvtk filter -f \"-sample,-group\n0\" | csvtk pretty\nsample   Proteobacteria   Firmicutes   Bacteroidetes   Deferribacteres   Tenericutes   group\nB.1      .16              .41          .33             .01               .01           Treatment\nB.2      .13              .55          .16             .01               .03           Treatment\nB.3      .22              .41          .29             .01               .02           Treatment\n\n\n\n\n\n\n\nMost of the time, we may want to remove samples with abundance of 0 in all taxons.\n\n\n$ cat otu_table3.csv | csvtk filter -f \"2-6\n0\" --any | csvtk pretty\nsample   Proteobacteria   Firmicutes   Bacteroidetes   Deferribacteres   Tenericutes   group\nA.1      .13              .42          .19             .17               .00           Ctrl\nA.2      .29              .06          .62             .00               .00           Ctrl\nA.3      .13              .49          .12             .24               .00           Ctrl\nB.1      .16              .41          .33             .01               .01           Treatment\nB.2      .13              .55          .16             .01               .03           Treatment\nB.3      .22              .41          .29             .01               .02           Treatment\n\n\n\n\n\n\n\n\n\n\n\n/**\n* RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.\n* LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables\n*/\n/*\nvar disqus_config = function () {\nthis.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable\nthis.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable\n};\n*/\n(function() { // DON'T EDIT BELOW THIS LINE\nvar d = document, s = d.createElement('script');\n\ns.src = '//csvtk.disqus.com/embed.js';\n\ns.setAttribute('data-timestamp', +new Date());\n(d.head || d.body).appendChild(s);\n})();\n\n\n\n\nPlease enable JavaScript to view the \ncomments powered by Disqus.", 
            "title": "Tutorial"
        }, 
        {
            "location": "/tutorial/#tutorial", 
            "text": "", 
            "title": "Tutorial"
        }, 
        {
            "location": "/tutorial/#forewords", 
            "text": "Yes, you could just use spreadsheet softwares like MS excel to\ndo most of the job.  Howerver it's all by clicking and typing, which is  not\nautomatically and time-consuming to repeate , especially when we want to\napply similar operations with different datasets or purposes.  csvtk  is  convenient for rapid investigation\nand also easy to integrated into analysis pipelines .\n It could save you much time of writting scripts.  Hope it be helpful for you.", 
            "title": "Forewords"
        }, 
        {
            "location": "/tutorial/#analyzing-otu-table", 
            "text": "", 
            "title": "Analyzing OTU table"
        }, 
        {
            "location": "/tutorial/#data", 
            "text": "Here is mock a OTU table from 16S sequencing result.\nColumns are sample IDs in format of \"GROUP.ID\"      $ cat otu_table.csv\n    Taxonomy,A.1,A.2,A.3,B.1,B.2,B.3,C.1,C.2,C.3\n    Proteobacteria,.13,.29,.13,.16,.13,.22,.30,.23,.21\n    Firmicutes,.42,.06,.49,.41,.55,.41,.32,.38,.66\n    Bacteroidetes,.19,.62,.12,.33,.16,.29,.34,.35,.09\n    Deferribacteres,.17,.00,.24,.01,.01,.01,.01,.01,.02\n    Tenericutes,.00,.00,.00,.01,.03,.02,.00,.00,.00  What's a mess. Let's make it prettier!      $ csvtk pretty otu_table.csv\n    Taxonomy          A.1   A.2   A.3   B.1   B.2   B.3   C.1   C.2   C.3\n    Proteobacteria    .13   .29   .13   .16   .13   .22   .30   .23   .21\n    Firmicutes        .42   .06   .49   .41   .55   .41   .32   .38   .66\n    Bacteroidetes     .19   .62   .12   .33   .16   .29   .34   .35   .09\n    Deferribacteres   .17   .00   .24   .01   .01   .01   .01   .01   .02\n    Tenericutes       .00   .00   .00   .01   .03   .02   .00   .00   .00", 
            "title": "Data"
        }, 
        {
            "location": "/tutorial/#steps", 
            "text": "Counting  $ csvtk stat otu_table.csv\nfile            num_cols   num_rows\notu_table.csv         10          5    Convert to tab-delimited table  $ csvtk csv2tab  otu_table.csv\nTaxonomy        A.1     A.2     A.3     B.1     B.2     B.3     C.1     C.2     C.3\nProteobacteria  .13     .29     .13     .16     .13     .22     .30     .23     .21\nFirmicutes      .42     .06     .49     .41     .55     .41     .32     .38     .66\nBacteroidetes   .19     .62     .12     .33     .16     .29     .34     .35     .09\nDeferribacteres .17     .00     .24     .01     .01     .01     .01     .01     .02\nTenericutes     .00     .00     .00     .01     .03     .02     .00     .00     .00    Column names  $ csvtk cut -n otu_table.csv\n#field  colname\n1       Taxonomy\n2       A.1\n3       A.2\n4       A.3\n5       B.1\n6       B.2\n7       B.3\n8       C.1\n9       C.2\n10      C.3    Extract data of group A and B and save to file  -o otu_table.gAB.csv  $ csvtk cut -F -f \"A.*,B.*,Taxonomy\" otu_table.csv -o otu_table.gAB.csv\n\n$ csvtk prety otu_table.gAB.csv\nTaxonomy          A.1   A.2   A.3   B.1   B.2   B.3\nProteobacteria    .13   .29   .13   .16   .13   .22\nFirmicutes        .42   .06   .49   .41   .55   .41\nBacteroidetes     .19   .62   .12   .33   .16   .29\nDeferribacteres   .17   .00   .24   .01   .01   .01\nTenericutes       .00   .00   .00   .01   .03   .02    Search some rows by fields. Matched parts will be highlighted as red  $ csvtk grep -f Taxonomy -r -p \"tes\" otu_table.gAB.csv -T  Result:     Transpose  $ csvtk transpose otu_table.gAB.csv -o otu_table.gAB.t.csv\n\n$ csvtk pretty otu_table.gAB.t.csv\nTaxonomy   Proteobacteria   Firmicutes   Bacteroidetes   Deferribacteres   Tenericutes\nA.1        .13              .42          .19             .17               .00\nA.2        .29              .06          .62             .00               .00\nA.3        .13              .49          .12             .24               .00\nB.1        .16              .41          .33             .01               .01\nB.2        .13              .55          .16             .01               .03\nB.3        .22              .41          .29             .01               .02    Rename first column  $ csvtk rename -f 1 -n \"sample\" otu_table.gAB.t.csv -o otu_table.gAB.t.r.csv\n\n$ csvtk pretty otu_table.gAB.t.r.csv\nsample   Proteobacteria   Firmicutes   Bacteroidetes   Deferribacteres   Tenericutes\nA.1      .13              .42          .19             .17               .00\nA.2      .29              .06          .62             .00               .00\nA.3      .13              .49          .12             .24               .00\nB.1      .16              .41          .33             .01               .01\nB.2      .13              .55          .16             .01               .03\nB.3      .22              .41          .29             .01               .02    Add group column  $ csvtk mutate -p \"(.+?)\\.\" -n group otu_table.gAB.t.r.csv -o otu_table2.csv\n\n$ csvtk pretty otu_table2.csv\nsample   Proteobacteria   Firmicutes   Bacteroidetes   Deferribacteres   Tenericutes   group\nA.1      .13              .42          .19             .17               .00           A\nA.2      .29              .06          .62             .00               .00           A\nA.3      .13              .49          .12             .24               .00           A\nB.1      .16              .41          .33             .01               .01           B\nB.2      .13              .55          .16             .01               .03           B\nB.3      .22              .41          .29             .01               .02           B    Rename groups:  $ csvtk replace -f group -p \"A\" -r \"Ctrl\" otu_table2.csv | csvtk replace -f group -p \"B\" -r \"Treatment\"   otu_table3.csv\n\n$ csvtk pretty otu_table3.csv\nsample   Proteobacteria   Firmicutes   Bacteroidetes   Deferribacteres   Tenericutes   group\nA.1      .13              .42          .19             .17               .00           Ctrl\nA.2      .29              .06          .62             .00               .00           Ctrl\nA.3      .13              .49          .12             .24               .00           Ctrl\nB.1      .16              .41          .33             .01               .01           Treatment\nB.2      .13              .55          .16             .01               .03           Treatment\nB.3      .22              .41          .29             .01               .02           Treatment    Statistics of number data  $ csvtk stat2 -f 2-6 otu_table3.csv\nfield             num    sum    min    max   mean   stdev\nProteobacteria      6   1.06   0.13   0.29   0.18    0.07\nFirmicutes          6   2.34   0.06   0.55   0.39    0.17\nBacteroidetes       6   1.71   0.12   0.62   0.28    0.18\nDeferribacteres     6   0.44      0   0.24   0.07     0.1\nTenericutes         6   0.06      0   0.03   0.01    0.01  Please don't be supprised at the  sum , it's a mock otu table...    Sort by abundance of  Proteobacteria  in descending order.  $ csvtk sort -k Proteobacteria:nr otu_table3.csv | csvtk pretty\nsample   Proteobacteria   Firmicutes   Bacteroidetes   Deferribacteres   Tenericutes   group\nA.2      .29              .06          .62             .00               .00           Ctrl\nB.3      .22              .41          .29             .01               .02           Treatment\nB.1      .16              .41          .33             .01               .01           Treatment\nB.2      .13              .55          .16             .01               .03           Treatment\nA.3      .13              .49          .12             .24               .00           Ctrl\nA.1      .13              .42          .19             .17               .00           Ctrl    Sort by abundance of  Proteobacteria  in descending order and  Firmicutes  in ascending order  $ csvtk sort -k Proteobacteria:nr -k Firmicutes:n otu_table3.csv | csvtk pretty\nsample   Proteobacteria   Firmicutes   Bacteroidetes   Deferribacteres   Tenericutes   group\nA.2      .29              .06          .62             .00               .00           Ctrl\nB.3      .22              .41          .29             .01               .02           Treatment\nB.1      .16              .41          .33             .01               .01           Treatment\nA.1      .13              .42          .19             .17               .00           Ctrl\nA.3      .13              .49          .12             .24               .00           Ctrl\nB.2      .13              .55          .16             .01               .03           Treatment    Filter samples with abundance greater than 0 in all taxons (columns except for sample and group, you can also use  -f \"2-6 0\" ).  $ cat otu_table3.csv | csvtk filter -f \"-sample,-group 0\" | csvtk pretty\nsample   Proteobacteria   Firmicutes   Bacteroidetes   Deferribacteres   Tenericutes   group\nB.1      .16              .41          .33             .01               .01           Treatment\nB.2      .13              .55          .16             .01               .03           Treatment\nB.3      .22              .41          .29             .01               .02           Treatment    Most of the time, we may want to remove samples with abundance of 0 in all taxons.  $ cat otu_table3.csv | csvtk filter -f \"2-6 0\" --any | csvtk pretty\nsample   Proteobacteria   Firmicutes   Bacteroidetes   Deferribacteres   Tenericutes   group\nA.1      .13              .42          .19             .17               .00           Ctrl\nA.2      .29              .06          .62             .00               .00           Ctrl\nA.3      .13              .49          .12             .24               .00           Ctrl\nB.1      .16              .41          .33             .01               .01           Treatment\nB.2      .13              .55          .16             .01               .03           Treatment\nB.3      .22              .41          .29             .01               .02           Treatment     \n/**\n* RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.\n* LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables\n*/\n/*\nvar disqus_config = function () {\nthis.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable\nthis.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable\n};\n*/\n(function() { // DON'T EDIT BELOW THIS LINE\nvar d = document, s = d.createElement('script');\n\ns.src = '//csvtk.disqus.com/embed.js';\n\ns.setAttribute('data-timestamp', +new Date());\n(d.head || d.body).appendChild(s);\n})();  Please enable JavaScript to view the  comments powered by Disqus.", 
            "title": "Steps"
        }
    ]
}